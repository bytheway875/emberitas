<h1 style="text-align:center">Emberitas Beginner Workshop - Color Palettes: Part 1</h1>

<p style="text-align:center"><img  src="https://github.com/lydiaguarino/emberitas-images/blob/master/Ember-Austin-Zoey-Half-sm.png?raw=true" alt="zoey-austin" title=""></p>

<hr>
<div style="text-align:center">
  <p >Today we’ll be playing the role of Front End Web Developer. We’ll learn about how developers turn ideas and designs into fully functioning applications.</p>

  <p>We’ll be following a typical developer workflow to turn a static image into a <em>real</em>, <em>live</em> application that our friends can play with on the web.</p>
</div>
<hr>


<h2>Phase 1 - <em>Requirements Gathering</em></h2>

<p>The first phase of any new project is to <strong>understand the problem you are trying to solve</strong>. This process is called <strong>requirements gathering</strong>. This process generally starts with understanding who <strong>your users</strong> will be and what they expect the application to do. Once you understand the needs of your users, you can start to make educated decisions about the <strong>tech</strong> and the <strong>visual design</strong> you want to use.</p>

<hr>

<h3>Step 1: User Stories</h3>

<p>User personas and user stories are tools designers and developers use to explore application needs from the perspective of the people who will be using the product.</p>

<blockquote>
  <p style="text-align: center"><img src="https://github.com/lydiaguarino/emberitas-images/blob/master/Ember-Austin-Zoey-Full-sm.png?raw=true" alt="zoey-full" title=""></p>

  <h4 id="chloes-user-persona"><strong>Chloe’s User Persona</strong></h4>

  <p><em>Name</em>: Chloe Tomster  <br>
  <em>Profession</em>: Web Designer  <br>
  <em>Traits</em>: <strong>Values visual aesthetics</strong>, Knows some HTML and CSS, Often uses software on <strong>mobile devices</strong> as well as her desktop computer when discussing projects with clients.</p>



  <h4><strong>Chloe’s User Story</strong></h4>

  <p>Chloe spends a lot of time as a visual designer experimenting with <strong>color palettes</strong>. She is frustrated that she doesn’t have a good reference tool to help her store and share the color palettes she creates. <strong>She needs a tool that will allow her to view and reference color palettes she creates.</strong> Since she values visual aesthetics, it is important to her that the tool be easy to use as well as pleasing to look at.</p>
</blockquote>

<hr>

<h3>Step 2: Application Specifications</h3>

<p>Now that we are familiar with our user and her needs, we can start to make assumptions and decisions about what we should build.</p>

<blockquote>
  <h5><strong>ACTIVITY: Brainstorming</strong></h5>

  <p>Review Chloe’s <em>user persona</em> and <em>user story</em>. Make some lists and sketches to brainstorm how Chloe might use an application to help her manage her color palettes. Here are some ideas to get you started:</p>

  <ol>
  <li>What might our screen look like?</li>
  <li>How will Chloe navigate between different screens?</li>
  <li>Do we need to display groups of things? If so, what types of things?</li>
  <li>What types of actions should Chloe be able to perform with the application?</li>
  <li>What types of forms and buttons might we need to accommodate those actions?</li>
  </ol>

</blockquote>

<hr>

<h3 id="wireframes">Step 3: Wireframes</h3>

<p>After speaking with the various <strong>stakeholders</strong> (perhaps the development team and our User Experience designer), we create our first <strong>wireframe</strong> - a simple sketch that outlines the major features of our project.</p>

<blockquote>
  <h4><strong>Wireframe: Color Palette </strong></h4>

  <p>There are three basic requirements for this project:</p>

  <blockquote>
    <ol>
    <li>Users should see a page header (Color Palettes) that welcomes them to the page.</li>
    <li>Each color palette has a title</li>
    <li>Each color palette includes five colors</li>
    </ol>
  </blockquote>

  <h5><strong>Our wireframe</strong></h5>

  <h2 id="title">    <img src="https://github.com/bytheway875/emberitas-images/blob/master/initial-wireframe.JPG?raw=true" alt="lydia-wireframe" title=""></h2>
</blockquote>

<hr>

<h3 id="reviewing-our-wireframes">Step 4: Reviewing our Wireframes</h3>

<p>We think this is perfection, so we share our wireframes with Chloe and other stakeholders and ask for frank feedback. We hear:</p>

<ol>
<li>“It would be great to see the colors right up next to each other so that I can compare them easier. Can you do that?”</li>
<li>“I’d love to be able to see the color code I’m looking at so that I can use the color in my own projects.”</li>
<li>“Is there a way for me to experiment with creating my own color palettes?”</li>
<li>“Can I add patterns instead of colors to a palette?”</li>
</ol>

<p>While getting feedback can be scary, it’s also very important to make sure that we’re creating software that truly fulfills the needs of the users. This is <em>wonderful</em> feedback, because it helps us learn that there are additional requirements for our project. </p>

<ol>
<li><p>“It would be great to see the colors right up next to each other so that I can compare them easier. Can you do that?”</p>

<ul><li>This is totally doable - SOLUTION: we’ll alter our wireframe to connect our colors for better visual comparison.</li></ul></li>
<li><p>“I’d love to be able to see the color code I’m looking at so that I can use the color in my own projects.”</p>

<ul><li>This makes loads of sense - if our color palettes are to be useful, our designers needs to get the color code to use in their projects! SOLUTION: we’ll show the color code when the user hovers over a color.</li></ul></li>
<li><p>“Is there a way for me to experiment with creating my own color palettes?”</p>

<ul><li>A great idea!  However, we need to inform the stakeholders that we’ll now be dealing with <strong>dynamic</strong> (i.e <em>changable</em>) information on our site – now we’re getting more complicated, and our developers will need more time to complete the project. SOLUTION: We’ll need a second wireframe for the new palette page.</li></ul></li>
<li><p>“Can I add patterns instead of colors to a palette?”</p>

<ul><li>It’s an interesting idea, but it’s outside of the <strong>scope</strong> of the problem we’re trying to solve. We respectfully inform our stakeholders that for our <strong>MVP</strong> (minimum viable product), we’ll only be focusing on color codes.</li></ul></li>
</ol>

<p>The requirements are no longer just to <strong>view and reference</strong> color palettes - now we want to <strong>create and save new color palettes</strong> as well. That means we’ll need to take a second pass at our wireframes.</p>

<blockquote>
  <h4 id="wireframes-color-palettes-list-view-and-new-color-palette-page"><strong>Wireframes: Color Palettes List View and New Color Palette Page</strong></h4>

  <p>First, we update our color palette list page to include two new features:</p>

  <blockquote>
    <ol>
    <li>Users should see a page header (Color Palettes) that welcomes them to the page.</li>
    <li>Each color palette has a title</li>
    <li>Each color palette includes five colors</li>
    <li><strong>We should see a button that links to a page to make your own color palette</strong></li>
    <li><strong>When we hover over a color, we should see the color code</strong> </li>
    </ol>
  </blockquote>

  <p><strong>List View  Wireframe:</strong></p>

  <h2 id="title-1">    <img src="https://raw.githubusercontent.com/bytheway875/emberitas-images/master/palette-list-view-wireframe.JPG?raw=true" alt="enter image description here" title=""></h2>

  <p>Next, we create a new wireframe for the new color palette page:</p>

  <blockquote>
    <ol>
    <li>The page should have a title (“New Palette”).</li>
    <li>There should be an input box for our new palette name (perhaps we can update the header once the palette has a name?)</li>
    <li>We should display the colors in the palette were creating, using the design on the palettes list view.</li>
    <li>When a user clicks on a palette color, we’ll populate that color into the edit area.</li>
    <li>The user can use input sliders OR a text input to input red(r), green(g), and blue(b) values between 0 and 255 for each color.</li>
    </ol>
  </blockquote>

  <p><strong>New Palette Wireframe:</strong></p>

  <h2 id="title-2">    <img src="https://raw.githubusercontent.com/bytheway875/emberitas-images/master/form-page-wireframe.JPG" alt="enter image description here" title=""></h2>
</blockquote>



<h3 id="high-resolution-mockups">Step 5: High-Resolution Mockups</h3>

<p>We return to the stakeholders with our new wireframes, and they’re all satisfied and impressed with our revisions. Our wireframes our approved, so we give them to our talented designer, Chloe, to create <em>high-resolution mockups</em> to guide our code implementation.</p>

<blockquote>
  <h4><strong>Final comps for our application</strong></h4>

  <p><img src="https://raw.githubusercontent.com/bytheway875/emberitas-images/master/final-comps.png" alt="enter image description here" title=""></p>
</blockquote>

<p>She also provides us with some specifications for colors, fonts, and tools to use in our application:</p>

<blockquote>
  <h4 id="application-colors-fonts-and-tools"><strong>Application Colors, Fonts, and Tools</strong></h4>

  <p><strong>Background color:</strong></p>

  <blockquote>
    <p>dark grayish-blue <code>#1E2229</code><em>- this is called a color hexcode</em></p>
  </blockquote>

  <p><strong>Font color:</strong></p>

  <blockquote>
    <p>light gray <code>#586073</code></p>
  </blockquote>

  <p><strong>Tropical Color Palette:</strong></p>

  <blockquote>
    <p>red <code>rgb(217,33,32)</code> <br>
    orange <code>rgb(231,116,47)</code> <br>
      yellow <code>rgb(223,165,58)</code> <br>
      lime <code>rgb(177,190,78)</code> <br>
      green <code>rgb(109,179,136)</code></p>
  </blockquote>

  <p><strong>Cool Color Palette:</strong></p>

  <blockquote>
    <p>light blue <code>rgb(70,131,193)</code> <br>
      dark blue <code>rgb(63,78,161)</code> <br>
      purple <code>rgb(120,28,129)</code> <br>
      black <code>rgb(0,0,0)</code> <br>
      white <code>rgb(255,255,255)</code></p>
  </blockquote>

  <h4><strong>Special Fonts</strong></h4>

  <blockquote>
    <p>Google Fonts - <a href="https://www.google.com/fonts#UsePlace:use/Collection:Pacifico">Pacifico</a></p>
  </blockquote>

  <h4><strong>Special Elements</strong></h4>

  <blockquote>
    <p><a href="http://getbootstrap.com/2.3.2/scaffolding.html#gridSystem">Twitter Bootstrap Responsive Grid System</a> <br>
    <a href="http://getbootstrap.com/2.3.2/components.html#buttonGroups">Twitter Bootstrap Button Groups</a></p>
  </blockquote>
</blockquote>

<p>–</p>

<blockquote>
  <h5><strong>A Little Bit of Color Theory</strong></h5>

  <p>You’ll notice that Chloe provides us two different types of color codes. </p>

  <p>For our application colors (the background and font color), we’ll be using <strong>hex codes</strong> - a character code with  that starts with a hashtag, like <code>#ffffff</code>.</p>

  <p>For our color palette colors, she provides <strong>rgb color codes</strong> - a three part code that includes values for the red(r), green(g), and blue(b) values of our colors, like <code>rgb(123, 23, 42)</code></p>

  <p>Every color is a mix of our three primary colors (red, blue, and green). The higher the value for each value, the more of that color we’ll see in our resulting color.</p>

  <p>Every color we can use on the web has a unique hex code AND rgb color code that applies to that color, and we can use them interchangeably. For example:</p>

  <blockquote>
    <p><strong>Black</strong> <br>
    Pure black is the <em>absence</em> of all color - zero values for red, blue, and green.</p>

    <p>hexcode: <code>#000000</code> <br>
    rgb code: <code>rgb(0,0,0)</code></p>

    <p><strong>White</strong> <br>
    Pure white is the <em>max value</em> of all colors - 255 for red, blue, and green. <br>
    hexcode: <code>#ffffff</code> <br>
    rgb code: <code>rgb(255,255, 255)</code></p>

    <p><strong>All other colors</strong> <br>
    All other colors are <em>some combination</em> of red, blue and green. Let’s take some examples from Chloe’s tropical color palette:</p>

    <p><em>Tropical Red</em> <br>
    hexcode: <code>#d92120</code> <br>
    rgb code: <code>rgb(217, 33, 32)</code></p>

    <p><em>Tropical Orange</em> <br>
    hexcode: <code>#e7742f</code> <br>
    rgb code: <code>rgb(231, 116, 47)</code></p>
  </blockquote>

  <p>You can use hexcodes and rgb code interchangeably in your color palette. We’ll use <code>rgb</code> colors for our palette colors because it’ll make it easy to change the red, blue, and green colors individually to create new palette colors!</p>

  <p>How are you expected to know them all? You aren’t! There are <strong>16,777,216</strong> colors that can be used on the web – you can’t memorize all that! You can <strong>Google the term <code>color picker</code></strong> and find countless applications to convert hex codes into rgb colors and vice versa!</p>
</blockquote>

<hr>

<h2>Let’s Take a Break</h2>

<p>You’ve learned a lot so far! Take a quick break to reset before we move on.</p>

<p style="text-align: center"><img src="https://github.com/lydiaguarino/emberitas-images/blob/master/Ember-Austin-Zoey-Half-sm.png?raw=true" alt="zoey-half" title=""></p>

<hr>


<h2>Phase 2 - <em>Getting Started with HTML, CSS and The Web</em></h2>

<p>Now that we’ve got Chloe’s excellent mockups to work off of, we need to turn her visuals into code that our <em>browser</em> understands.</p>

<hr>

<h4><strong>What’s a Browser?</strong></h4>

<p>You use a web browser every day! Safari, Chrome, Firefox, and Internet Explorers are all examples of web browsers. Browsers follow a set of <strong>protocols</strong> (aka <em>rules</em>) to communicate with <strong>servers</strong> (like <em>storage areas</em>) that <em>serve</em> data and information to the web.</p>

<hr>

<h4><strong>How Does Information Get to my <em>Browser</em>?</strong></h4>

<p>Browsers follow a set of <strong>protocols</strong> (aka <em>rules</em>) to communicate with <strong>servers</strong> (like <em>storage areas</em>) that <em>serve</em> data and information to the web.</p>

<p>The most common of these protocols is called <strong>HTTP</strong> (Hyper Text Transfer Protocol). Using HTTP, a browser (aka <strong>the client</strong>) requests information from your <strong>server</strong>. </p>

<p>When you visit any web address (example: www.google.com) the <strong>client</strong> browser sends a request to the <strong>server</strong> to ask for the data and information that should be shown at that address. If the response the server sends back can be interpreted by the client, the client will use that information to show you information on the webpage!</p>

<blockquote>
  <p><strong>CONFUSING, right?! Let’s try an analogy</strong>:</p>

  <p><em>In Real Life</em> <br>
  You want to go out to eat. You choose a restaurant: Torchy’s Tacos.  </p>

  <p>You arrive and you’re now a <em>client</em> at the taco shop! </p>

  <p>You sit down and ask your <em>server</em> to bring you some water. She interprets your request and understands what you mean, so she brings you some water.</p>

  <p>She brings you the water back, and you know what to do with that… you drink it!</p>

  <p>You continue to make more requests: for tacos, for the check, for a refill. You understand what she means and she understand what you means, so the requests are successful! </p>

  <p><em>On the WEB</em>:  <br>
  Going the restaurant is like going to a web url: <code>www.torchys.com</code>.</p>

  <p>The <em>browser</em> you’re using acts on your behalf as the <em>client</em> to make HTTP requests to an invisible <em>server</em>. </p>

  <p>If the client and the server are speaking the same language and making valid requests, you’ll get the information you need!</p>
</blockquote>

<hr>

<h3>Speaking the Languages of the Web</h3>

<p>Your browser knows how to interpret three main types of text returned from a server - <strong>HTML</strong> (Hypertext Markup Language), <strong>CSS</strong> (Cascading Style Sheets) , and <strong>Javascript</strong>. These components are the building blocks of the web and, lucky for you, we’ll be learning to work with each today!</p>

<p>Here’s some more information about each: </p>

<ol>
<li><p><strong>HTML</strong> - Provides the structure and content for your webpage. </p></li>
<li><p><strong>CSS</strong> - Works in collaboration with HTML to change the way your elements look by changing sizes, colors, and placement on the page.</p></li>
<li><p><strong>Javascript</strong> - Allows you to create interesting interactions on the page, like rotating content in a slide show, or changing a color when you slide an input bar!</p></li>
</ol>

<p>Web pages don’t start out pretty. They start out as simple text. A web developer then gradually adds layers of markup, styling and interactions to that text to produce the rich experience you get when working with applications on the internet.</p>

<hr>

<h3>So Let’s Code!</h3>

<p>Enough talk -  Let’s get going!</p>

<p>What you will need:  </p>

<ol>
<li><p>A text editor - we recommend <a href="https://atom.io/">Atom</a> or <a href="https://www.sublimetext.com/">Sublime Text</a>, which are both free </p></li>
<li><p>A browser - we recommend <a href="https://www.google.com/chrome/browser/desktop/index.html">Google Chrome</a></p></li>
</ol>

<blockquote>
  <p><strong>STOP!</strong> If you haven’t already, refer to the {{#link-to 'resources.installation'}}Emberitas Installation Guide{{/link-to}} to make sure you have all the software necessary for this workshop!</p>
</blockquote>

<hr>

<h3>Step 1. Creating a File Structure</h3>

<p>Open your text editor and create a new directory (folder) called “emberitas”.  </p>

<p>Create a <code>palettes.html</code> file in the emberitas folder.</p>

<p>Your <em>file tree</em> in your text editor should now look something like this:</p>



<pre class="prettyprint"><code class=" hljs avrasm">    emberitas
        palettes<span class="hljs-preprocessor">.html</span></code></pre>

<blockquote>
  <h4 id="activity"><strong>ACTIVITY</strong></h4>

  <p>OPEN PALETTES.HTML IN YOUR BROWSER</p>

  <ol>
  <li>Find palettes.html in your Finder or by searching for it on your computer.</li>
  <li>To open, double-click. <br>
  <ul><li>If that opens your browser, great! </li>
  <li>If it opens in a text editor, right-click and choose ‘Open With’ to select your browser.</li></ul></li>
  </ol>
</blockquote>

<hr>

<h3>Step 2. Understanding HTML Basics</h3>

<p>HTML tags look something like this:</p>

<p><code>&lt;tag&gt; Your Content Here &lt;/tag&gt;</code> </p>

<p><code>&lt;tag&gt;</code> <em>opens</em> the tag. <code>&lt;/tag&gt;</code> (with a backslash before the tag name <em>closes</em> the tag. All of the information between the <em>open</em> and <em>closing</em> tag is the <em>content</em> of that tag.</p>

<p>There are tags for lots of different purposes, and each have different default behaviors and styles. You can also <em>nest</em> elements within one another to create a more complex document. For example:</p>



<pre class="prettyprint"><code class=" hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span> Welcome to my page <span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">h2</span>&gt;</span> Reasons my page is cool:<span class="hljs-tag">&lt;/<span class="hljs-title">h2</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">ul</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>I'm cool.<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>You're cool.<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></code></pre>

<p>In the above example, we have a <code>&lt;div&gt;</code> (<em>page division</em>) that includes an <code>&lt;h1&gt;</code> (<em>main header</em>) followed by an <code>&lt;h2&gt;</code>(<em>secondary header</em>), and a <code>&lt;ul&gt;</code> (unordered list – aka bullet points) that includes many <code>&lt;li&gt;</code> elements (<em>list items</em>).</p>

<h4>Check out our {{#link-to 'resources.basics.html-tags'}}html reference sheet {{/link-to}} for more about html tag options!</h4>

<hr>

<h3>Step 3. Adding Barebones HTML To Our Document</h3>

<p>But before we jump into laying out the custom elements on our page, we need to add some barebones starter code to our html document.</p>

<ol>
<li>We include an explicit <code>&lt;!DOCTYPE html&gt;</code> tag (self-closing) to help the browser know how to interpret our document.</li>
<li>We have a main <code>&lt;html&gt;&lt;/html&gt;</code> tag. All other tags on our page will be inside the content of the <code>&lt;html&gt;</code> tag.</li>
<li>We’ll always start with a  <code>&lt;head&gt;</code> and <code>&lt;body&gt;</code> tag inside of our <code>&lt;html&gt;</code> tag. </li>
</ol>

<pre class="prettyprint"><code class="language-html hljs ">    <span class="hljs-comment">&lt;!-- this is an HTML comment. It is invisible. --&gt;</span>

    <span class="hljs-comment">&lt;!-- tell the browser this is an HTML document --&gt;</span>
    <span class="hljs-doctype">&lt;!DOCTYPE html&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span></code></pre>

<blockquote>
  <h4 id="activity-1"><strong>ACTIVITY</strong></h4>

  <p>ADD THE BASIC HTML STRUCTURE TO PALETTES.HTML</p>

  <ol>
  <li>Indicate the doctype</li>
  <li>Include an <code>html</code> tag with a <code>head</code> and <code>body</code> tag nested within it.</li>
  </ol>
</blockquote>

<hr>

<h3>Step 4. Adding Browser Instructions To The <code>&lt;head&gt;</code></h3>

<p>The <code>&lt;head&gt;</code> tag is mostly reserved for tags that give special instructions to our browser to tell our page how to behave, and to help us index our website on search engines. A typical <code>&lt;head&gt;</code> tag includes some metadata (data about data) and a required <code>&lt;title&gt;</code> tag.</p>

<pre class="prettyprint"><code class="language-html hljs "><span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">charset</span>=<span class="hljs-value">"UTF-8"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"description"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"Emberitas Practice Application"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"author"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"Lydia Guarino"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"viewport"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"width=device-width, initial-scale=1.0"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span>Emberitas Practice<span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span></code></pre>

<blockquote>
  <h4 id="activity-2"><strong>ACTIVITY</strong></h4>

  <p><strong>COPY AND PASTE</strong> THE CODE WITHIN THE HEAD TAG INTO YOUR DOCUMENT.</p>

  <ol>
  <li>Change the meta author tag to have YOUR name.</li>
  <li>Change the title and the meta description of the page to something descriptive for our color palette application.</li>
  </ol>

  <p>This code is pretty consistent between apps - no need to understand right now what each meta tag does (Google if you’re interested), and don’t risk a typo by typing it out. Just copy and paste into your doc… you can save this code and change what’s custom for any future projects you do, too.</p>
</blockquote>


<hr>

<h3>Step 5 - Laying Out The <code>&lt;body&gt;</code></h3>

<p>Now that we’ve made these changes in the head of our document, we can refresh the file in our browser… but nothing much looks different. That’s because most of our changes were to invisible <em>metadata</em> that’s only useful for helping our browser interpret data. </p>

<p>The really fun stuff - our headers, page divisions, and color palettes - will go in our <code>&lt;body&gt;</code></p>

<p>The first thing we’ll do is add an <code>&lt;h1&gt;</code> to our body.</p>



<pre class="prettyprint"><code class="language-html hljs ">    <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span> Hello World! <span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span></code></pre>

<p>After adding this h1 tag, we can refresh the file in our browser and we should see:</p>



<h1 id="hello-world">Hello World!</h1>

<p>Cool, right?</p>

<p>Let’s reference our mockup again:</p>

<p><img src="https://raw.githubusercontent.com/bytheway875/emberitas-images/master/list-view-mockup.png" alt="list-view-mockup" title=""></p>

<p>We can use this to start to layout our html in a logical manner. First, let’s get our header updated.</p>

<blockquote>
  <h4><strong>ACTIVITY</strong></h4>

  <p>CHANGE THE <code>&lt;h1&gt;</code> TAG TO SHOW OUR COLOR PALETTES MAIN HEADER TITLE</p>

  <ol>
  <li>The <code>&lt;h1&gt;</code> header should say “Color Palettes” instead of Hello World.</li>
  <li>Refresh your page to see your changes take effect.</li>
  </ol>
</blockquote>

<p>Now, let’s continue to add the other necessary elements to our page. </p>

<p>We can see in our mockup that we have two color palettes on our page, each with it’s own header and bar of colors. With html and css, there are always multiple ways to achieve the same goal - you just have to choose an approach. Our approach will be to create a <code>&lt;div&gt;</code> that contains an <code>&lt;h2&gt;</code> with the name of our palette and five(5) <code>&lt;button&gt;</code> tags that will hold each color in the palette.</p>

<blockquote>
  <h4><strong>ACTIVITY</strong></h4>

  <p>CREATE A <code>&lt;div&gt;</code> THAT INCLUDES STARTER HTML FOR A COLOR PALETTE </p>

  <ol>
  <li>There should be an outer <code>&lt;div&gt;</code> tag </li>
  <li>There should be an <code>&lt;h2&gt;</code> tag where the contents is the name of your first color palette (Tropical)</li>
  <li>There should be 5 empty <code>&lt;button&gt;</code> tags inside the div.</li>
  <li>Then, create a second <code>&lt;div&gt;</code> with an <code>&lt;h2&gt;</code> and <code>&lt;button&gt;</code>s for the second color palette in our mockup.</li>
  <li>Reload the page - you should now see something that looks like this: <br>
  <img src="https://github.com/bytheway875/emberitas-images/blob/master/completely-unstyled.png?raw=true" alt="unstyled-html" title=""></li>
  </ol>
</blockquote>

<hr>

<h2>Let’s Take A Break</h2>

<p>Great job! You’ve accomplished so much so far. Let’s take another break to keep your brain healthy and happy.</p>

<p style="text-align: center"><img src="https://github.com/lydiaguarino/emberitas-images/blob/master/Ember-Austin-Zoey-Half-sm.png?raw=true" alt="enter image description here" title=""></p>

<hr>



<h2>Phase 3 - <em>Starting To Style</em></h2>

<p>Looking at our final mockup versus our html document, you can tell that they share common elements. But it’s a far cry from the beautiful layout Chloe created for us. </p>

<p>To change the appearance of our page, we’ll have to give our layout more detailed instructions.</p>

<hr>

<h3>Step 1: Inline Styles In HTML</h3>

<p>Let’s take a look at one of the <code>&lt;div&gt;</code>s we just  created:</p>

<pre class="prettyprint"><code class="language-html hljs ">    <span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">h2</span>&gt;</span> Tropical <span class="hljs-tag">&lt;/<span class="hljs-title">h2</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></code></pre>

<p>We know that our mockup indicates that the background color of each button should be unique. But ours are all some boring gray color! We can give each button a specific color using the <code>style</code> <em>attribute</em> on our html tags.</p>

<p>You can add a <code>style</code> attribute to almost any html element to customize its appearance. Try it on one of your buttons: </p>

<p><code>&lt;button style="background-color: rgb(217,33,32)"&gt;</code> </p>

<p>When you reload the page, you’ll notice that the button with the altered style attribute will have a different background color. Now, let’s use this concept to change ALL the colors of the buttons on our page, based on the color palette Chloe provided us with. </p>

<blockquote>
  <h4><strong>ACTIVITY</strong></h4>

  <p>USING CHLOE’S COLOR PALETTE AND YOUR KNOWLEDGE OF STYLE TAGS, UPDATE THE BACKGROUND COLOR OF EACH BUTTON TO MATCH THE COLORS IN CHLOE’S LIST. (<strong>LINK TO COLOR PALETTE </strong> )</p>

  <ol>
  <li>All 10 button elements should have a style attribute and a custom color.</li>
  <li>Work smart, not hard: Feel free to copy and paste the parts that are the same and change only what’s unique.</li>
  </ol>
  <p>When you're done, your page should look a little like this: </p>
  <p><img src="https://github.com/bytheway875/emberitas-images/blob/master/without-background-color.png?raw=true" alt="colored-button"></p>
</blockquote>

<hr>

<h3>Step 2: Sharing Styles Using CSS</h3>

<p>I bet you are starting to realize that if you had a really complex application, it would get very tedious to have to individually style every single element on the page - and what if you wanted to change the way ALL the buttons looked in your entire application? It would get completely unmanageable. <strong>There must be a better way - and there is.</strong></p>

<p>Once we start having <em>repeating</em> style instructions for elements, that’s a good sign that its time to add our friend <strong>CSS</strong> into the mix.</p>

<p><strong>CSS</strong> (Cascading Style Sheet) allows us to organize our style instructions in a separate file by referencing their html tag names and other unique elements. Using CSS, we can apply the same style to multiple elements on the page. This results in cleaner html files and easier-to-read markup.</p>

<p>To get started with <strong>CSS</strong>, we’ll have to add a new file called <code>style.css</code> to our file tree. Then we, link the stylesheet to our html page by adding a <em>stylesheet link tag</em> to the <code>&lt;head&gt;</code> of our html page.</p>



<pre class="prettyprint"><code class="language-html hljs "><span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
  <span class="hljs-comment">&lt;!-- your current head code --&gt;</span>

  <span class="hljs-comment">&lt;!-- stylesheet link tag --&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"style.css"</span>&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span></code></pre>

<p>From there, we can use <em>css syntax</em> change the appearance of any element on our page. </p>

<p>The syntax requires that you type the name of the element, and put all of our instructions inside of <em>curly braces</em>. You specify the name of the style attribute on the left, and the value on the right.</p>


<pre class="prettyprint"><code class="language-css hljs "><span class="hljs-tag">tagName</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">attribute</span>:<span class="hljs-value"> value</span></span>;
<span class="hljs-rule">}</span></span></code></pre>

<p>Here’s a useful example of how we can use css to change the font color of the h1’s to red (using the attribute <em>color</em>) and the background color of the entire body (using the attribute <em>background-color</em>)</p>



<pre class="prettyprint"><code class="language-css hljs "><span class="hljs-tag">h1</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> red</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-tag">body</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> blue</span></span>;
<span class="hljs-rule">}</span></span></code></pre>

<p>Now you try!</p>

<blockquote>
  <h4 id="activity-6">ACTIVITY</h4>

  <p>CREATE A STYLE.CSS FILE AND USE IT TO CHANGE THE APPEARANCE OF ELEMENTS ON YOUR PAGE USING CHLOE’S COLOR PALETTE (<strong>LINK TO COLOR PALETTE HERE</strong>)</p>

  <ol>
  <li>Create a new file called <code>style.css</code> in your emberitas folder</li>
  <li>Link your stylesheet in the <code>&lt;head&gt;</code> of your html document using <code>&lt;link rel="stylesheet" href="style.css"&gt;</code></li>
  <li>In your style.css file: <br>
  <ul><li>Change the background color of the entire page.</li>
  <li>Change the font color of every h1 and h2.</li></ul></li>
  </ol>
</blockquote>

<p>When we reload the page, we can see that now we’re even a little bit closer to Chloe’s design.</p>

<hr>

<h3>Step 3: Getting Professional With Google Fonts</h3>

<p>One obvious difference between our current html page and our mockup is the font. We’re using boring old Times New Roman, but Chloe’s got a fun, cursive font called <em>Pacifico</em> she’d like us to use. </p>

<p>The <a href="https://www.google.com/fonts">Google fonts site</a> has wonderful documentation on how to add a font to your project. Search for the font you want to use (Pacifico) and click the “+” button. Then, click the div at the bottom that appears for more information on how to apply your font.</p>

<p>You should see a <code>&lt;link&gt;</code> tag generated that you can add to the <code>&lt;head&gt;</code> of your html file:</p>

<pre class="prettyprint"><code class=" hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
<span class="hljs-comment">&lt;!-- Your existing head content --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"https://fonts.googleapis.com/css?family=Pacifico"</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"style.css"</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span></code></pre>

<p>Linking to a stylesheet someone else created is called using an <em>external stylesheet</em>. The one important thing to keep in mind is that <strong>external stylesheets must be linked <em>before</em> your custom stylesheet</strong> so that their code loads before your code.</p>

<p>After you’ve linked the new stylesheet, you can use the second snippet of code provided by Google in your stylesheet to apply the new font:</p>



<pre class="prettyprint"><code class=" hljs css"><span class="hljs-tag">h1</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">font-family</span>:<span class="hljs-value"> <span class="hljs-string">'Pacifico'</span>, cursive</span></span>;
<span class="hljs-rule">}</span></span></code></pre>

<blockquote>
  <h4 id="activity-7">ACTIVITY</h4>

  <p>LINK A GOOGLE FONT TO YOUR HTML FILE AND CHANGE THE FONT FAMILY OF ALL HEADERS ON YOUR PAGE.</p>

  <ol>
  <li>Find the font you’d like to use on Google Fonts (Chloe recommends Pacifico, but you’re free to have some fun and select your own.)</li>
  <li>In your html document, add the stylesheet <code>&lt;link&gt;</code> tag provided by Google Fonts to the <code>&lt;head&gt;</code> <br>
  <ul><li>Make sure the Google <code>&lt;link&gt;</code> is <strong>before</strong> your <code>style.css</code> link so that you can access the font in your own file!</li></ul></li>
  <li>In your CSS File,  change the font-family of your <code>h1</code>  tags to use the font you selected.</li>
  </ol>
</blockquote>

<p style="text-align: center"><img src="https://raw.githubusercontent.com/bytheway875/emberitas-images/master/without-container.png" ></p>

<hr>

<h3>Step 4: Coding The Smart Way With Bootstrap</h3>

<p>When we reload the page after applying our font, we can see that we’re, again, one step closer to our end product. But progress is slow. How about we speed things up a little by using an <em>external library</em>?</p>

<p>Leveraging code that other people write is a great way to speed up the development process and create professional-quality apps much more quickly than we could do on our own!</p>

<p><a href="http://getbootstrap.com/2.3.2/index.html">Twitter Bootstrap</a> is an incredibly popular <em>responsive framework</em>. Responsive frameworks provide advanced styling to help you to build applications that will look good on giant desktop monitors, laptop screens, tablets and smaller mobile devices, all without having to write totally different styling for each size screen.</p>

<p>Twitter Bootstrap is an incredibly popular responsive framework. Responsive frameworks provide advanced styling to help you to build applications with reusable components and elements.</p>

<p>Bootstrap uses an HTML tag attribute called a <strong>class</strong> to apply it’s styles to your elements.</p>

<p>You can apply a class to an attribute like this:</p>

<p><code>&lt;div class="container"&gt;&lt;/div&gt;</code></p>

<p>Notice that our current implementation looks a bit… lopsided. Everything is pushed so far over to the left that our page looks unbalanced. While we can easily fix this on our own, by leveraging Bootstrap we can do it in just a couple of seconds, without writing any custom CSS code!</p>

<p>To get started, let’s import the Bootstrap CSS code adding another stylesheet <code>&lt;link&gt;</code> to our <code>&lt;head&gt;</code></p>



<pre class="prettyprint"><code class=" hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- Copy and paste this link into your head BEFORE your custom stylesheet (style.css) --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"</span> <span class="hljs-attribute">integrity</span>=<span class="hljs-value">"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u"</span> <span class="hljs-attribute">crossorigin</span>=<span class="hljs-value">"anonymous"</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span></code></pre>

<p>Now we can start using all of Bootstraps cool features! Let’s leverage the <a href="http://getbootstrap.com/css/#overview-container">Bootstrap container</a>. It will wrap all of our elements and add some <em>margin</em> and <em>padding</em> to the page. </p>



<pre class="prettyprint"><code class=" hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"container"</span>&gt;</span>
        <span class="hljs-comment">&lt;!-- beginning of current body code --&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-title">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">h2</span>&gt;</span>
                ...
            <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-comment">&lt;!-- end of current body code --&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span></code></pre>

<blockquote>
  <h4 id="activity-8"><strong>ACTIVITY</strong></h4>

  <p>ADD A BOOTSTRAP CONTAINER TO YOUR PAGE, AND USE THE BOOTSTRAP CLASS ‘BTN’ ON YOUR BUTTONS</p>

  <ol>
  <li>Add a <code>&lt;link&gt;</code> to the Bootstrap Stylesheets to your <code>&lt;head&gt;</code> <br>
  <ul><li>Here’s the link: <code>&lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous"&gt;</code></li></ul></li>
  <li>Add a div with class <code>container</code> that wraps ALL of the code that is currently in the <code>&lt;body&gt;</code> of your html.</li>
  <li>Add a class named <code>btn</code> to each of your <code>&lt;button&gt;</code> elements. </li>
  <li>Refresh the page - Your elements should no longer seem so cramped! And did you notice that those buttons look a LOT more modern now?</li>
  </ol>

  <p>We can’t cover <em>all</em> of Bootstrap’s awesome features in this course! Check out <a href="http://getbootstrap.com/css/">Bootstrap’s Documentation</a> to learn more!</p>
</blockquote>

<p style="text-align:center"><img src="https://raw.githubusercontent.com/bytheway875/emberitas-images/master/bootstrap-buttons.png?raw=true"  alt="colored-button"></p>

<hr>

<h3>Step 5 - Styling Our Palette Bars with Bootstrap</h3>

<p>We’ve added a class named <code>btn</code> to each of our button elements, but they still don’t <em>quite</em> look like the mockup that Chloe gave us. Thankfully, a combination of a bootstrap element and some custom css can help us change all that!</p>

<p>Hmm… Let’s see if we can find some Bootstrap Component that can help us out. Cue <a href="http://getbootstrap.com/components/#btn-groups">Bootstrap Button Groups</a>. Doesn’t this look a bit more like what we need?</p>

<p style="text-align:center"><img src="https://raw.githubusercontent.com/bytheway875/emberitas-images/master/bootstrap-doc.ong.png" width=500></p>

<p>According to the documentation, we can wrap our <code>&lt;button&gt;</code> tags in a <code>&lt;div&gt;</code> with the classes <code>"btn-group btn-group-lg btn-group-justified"</code> to make it look a little better:</p>



<pre class="prettyprint"><code class="language-html hljs ">    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn-group"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"background-color: rgb(217,33,32)"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"background-color: rgb(231,116,47)"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"background-color: rgb(223,165,58)"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"background-color: rgb(177,190,78)"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"background-color: rgb(109,179,136)"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></code></pre>

<p>By adding the class <code>btn-group</code>, our buttons will now touch!</p>

<blockquote>
  <h4 id="activity-9"><strong>ACTIVITY</strong></h4>

  <p>ADD A DIV WITH THE CLASS OF <code>btn-group</code> AROUND EACH GROUP OF BUTTONS</p>

  <ol>
  <li>Each <code>&lt;button&gt;</code> must have the class of <code>btn</code>.</li>
  <li>The <code>&lt;div&gt;</code> with class <code>btn-group</code> should open BEFORE the first of the five buttons and close AFTER the closing tag of the last button.</li>
  </ol>
</blockquote>

<p>Thanks to Bootstrap, the hardest part is done! But the rest is up to us. We’ll need to customize the styles on our buttons a bit more before Chloe will be impressed. So let’s do it.</p>

<p style="text-align:center"><img src="https://raw.githubusercontent.com/bytheway875/emberitas-images/master/cramped-buttons-wip.png?raw=true"  alt="colored-button"></p>

<hr>

<h3>Step 6 - Finishing Touches With Custom Classes</h3>

<p>Let’s review the mockups for our Color Palettes List View one more time. There are THREE big alterations we need to make to our palette buttons.</p>

<ol>
<li>We need our palette to span the entire with of its container.</li>
<li>We need to show the color code on hover.</li>
<li>We need the height of the buttons to be a bit more robust.</li>
</ol>

<p>Let’s start by giving our our buttons an explicit with using our own css class. We’ll start by adding a css class called <code>palette-btn</code> to each button element: <br>
<code>&lt;button class="btn palette-btn" style="background-color: rgb(217,33,32)"&gt;&lt;/button&gt;</code></p>

<p>And an additional class called <code>full-width-btn-group</code> to our <code>btn-group</code> div: <br>
<code>&lt;div class="btn-group full-width-btn-group"&gt;&lt;/div&gt;</code></p>

<p>Then, we can modify our <code>style.css</code> to target all classes named <code>palette-btn</code>.</p>



<pre class="prettyprint"><code class="language-css hljs "><span class="hljs-comment">/* We must set an explicit width on the btn-group for this to work! */</span>
<span class="hljs-class">.full-width-btn-group</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> <span class="hljs-number">100</span>%</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.palette-btn</span> <span class="hljs-rules">{
    <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value"> <span class="hljs-number">75</span>px</span></span>;
    <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> <span class="hljs-number">20</span>%</span></span>;
<span class="hljs-rule">}</span></span></code></pre>

<p>In css, we prepend a <code>.</code> to the name of our class to distinguish classes like <code>palette-btn</code> from tag names like <code>button</code>.  </p>

<p>Now our button elements are taller (75px, to be specific) and wider (20% of the width of the <code>btn-group</code> div)</p>

<blockquote>
  <h4 id="activity-1-1"><strong>ACTIVITY 1</strong></h4>

  <p>MAKE YOUR BUTTONS 75px TALL AND SPAN 20% THE WIDTH OF THE <code>btn-group</code>. </p>

  <ol>
  <li>Add a class named <code>palette-btn</code> to each of your button elements.</li>
  <li>Add a class named <code>full-width-btn-group</code> to each of your <code>btn-group</code> elements.</li>
  <li>In your CSS: <br>
  <ul><li>Give a width of 100% to <code>full-width-btn-group</code></li>
  <li>Give a width of 20% and a height of 75px to <code>palette-btn</code></li></ul></li>
  </ol>

  <h4 id="activity-2-1"><strong>ACTIVITY 2</strong></h4>

  <p>STYLE YOUR H1</p>

  <p>Now that we know how to make elements bigger using pixels, let’s see if we can do the same for our font!</p>

  <p>In <code>style.css</code>:</p>

  <ol>
  <li>Add a <code>font-size</code> attribute with a pixel value (ex <code>50px</code>) to make the font-size of your H1 larger.</li>
  <li>Experiment with font sizes until it looks like a proper header.</li>
  <li>Add an attribute called <code>text-align</code> with a value of <code>center</code> to center the header text within your container.</li>
  <li>Add an attribute called <code>padding</code> with a value of <code>50px</code> to pad your H1 with extra space on the top, right, bottom, and left.</li>
  </ol>
</blockquote>

<p><img src="https://raw.githubusercontent.com/bytheway875/emberitas-images/master/with-centered-h1.png" style="text-align:center" ></p>

<hr>

<h3>Step 7 - Hover Interactions With CSS</h3>

<p>Next, let’s add some <em>content</em> to our button tags. We know that we want to show our rgb color code on the button when we hover over it, but let’s run before we jump by simply adding the rgb color to the button content. </p>

<p>Modify your buttons to include the rgb color like this:</p>

<pre class="prettyprint"><code class=" hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn palette-btn"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"background-color: rgb(217,33,32)"</span>&gt;</span>
    rgb(217,33,32)
<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span></code></pre>

<p>When you reload the page, you’ll see that our button now shows the hex code! But how can we alter this code to show <em>only</em> when a user <strong>hovers</strong> over the button? With more css selectors!</p>

<p>CSS provides us with some <strong>pseudo-selectors</strong> that allow us to target elements when they’re in a certain state. We can target the <strong>hover state</strong> using this format:</p>

<pre class="prettyprint"><code class=" hljs applescript">.palette-btn:hover {
    /*attributes <span class="hljs-keyword">that</span> you want <span class="hljs-keyword">to</span> change <span class="hljs-function_start"><span class="hljs-keyword">on</span></span> hover*
}</code></pre>

<blockquote>
  <h4 id="activity-10"><strong>ACTIVITY</strong></h4>

  <p>USE THE HOVER PSEUDO-SELECTOR TO CHANGE THE BEHAVIOR OF <code>palette-btn</code> elements.</p>

  <ol>
  <li>Add a <code>color</code> attribute with the value of <code>transparent</code> to the existing <code>.palette-btn</code> styles in <code>styles.css</code> </li>
  <li>Create a new ruleset for <code>.palette-btn:hover</code> in <code>styles.css</code> that has a <code>color</code> attribute with the value of <code>inherit</code> <br>
  <ul><li><code>inherit</code> applies the color attribute of the parent object to the element.</li></ul></li>
  </ol>
</blockquote>

<hr>

<h3>Step 8 - Add a Link To Our New Color Page</h3>

<p>There’s just <em>one last step</em> left until our mockup looks exactly like our coded palettes page - we need a link to our new palettes page.</p>

<p>We can create links to other pages using an anchor tag:</p>

<p><code>&lt;a href="new-palette.html"&gt;MAKE YOUR OWN PALETTE&lt;/a&gt;</code></p>

<p>If we create a file called <code>new-palette.html</code>, we’ll see that we can use the new link on our page to navigate to the new-palette file.</p>

<blockquote>
  <h4 id="activity"><strong>ACTIVITY</strong></h4>

  <p>STYLE YOUR LINK WITH BOOTSTRAP AND CUSTOM CLASSES</p>

  <p><code>&lt;a&gt;</code> tags can be styled using the same Bootstrap classes that go on button elements. You can read more about your options in the <a href="https://getbootstrap.com/css/#buttons-options">Bootstrap Documentation</a>. </p>

  <p>Our final code looks like this:</p>

  <pre class="prettyprint"><code class="language-html hljs "><span class="hljs-comment">&lt;!-- palettes.html --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"text-center"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn btn-info link-to-new"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"new-palette.html"</span>&gt;</span>Create Your Own Palette<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
   <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></code></pre>

  <pre class="prettyprint"><code class="language-html hljs ">/* style.css */
.link-to-new {
    margin: 75px;
    font-size: 25px;
}</code></pre>
</blockquote>

<p>Wow! Good job. Now your app looks just like Chloe’s mockup!</p>

<p style="text-align:center"><img src="https://raw.githubusercontent.com/bytheway875/emberitas-images/master/list-view-mockup.png" ></p>

<hr>

<h1 id="lets-take-a-break-2">Let’s Take A Break</h1>
<p> What great work! You deserve a break. </p>

<p style="text-align:center"><img  src="https://github.com/lydiaguarino/emberitas-images/blob/master/Ember-Austin-Zoey-Half-sm.png?raw=true" alt="zoey-austin" title=""></p>

<hr>

<h2 id="phase-4-a-quick-introduction-to-javascript">Phase 4: A Quick Introduction to Javascript</h2>

<p>We promised some fun interactions using Javascript, so before we jump in to creating the html and CSS we’ll need for our second page, let’s try creating a simple interaction in pure Javascript.</p>

<hr>

<h3 id="step-1-creating-a-javascript-file">Step 1: Creating A Javascript File</h3>

<p>For this, we’ll first need to create a javascript file called <code>script.js</code> and link it to our html document using a <code>`&lt;script&gt;</code> tag:</p>



<pre class="prettyprint"><code class=" hljs d">&lt;<span class="hljs-keyword">body</span>&gt;
    &lt;!-- All of your existing <span class="hljs-keyword">body</span> content <span class="hljs-keyword">is</span> here -&gt;
    &lt;script src=<span class="hljs-string">"script.js"</span>&gt;&lt;/script&gt;
&lt;/<span class="hljs-keyword">body</span>&gt;</code></pre>

<p>We’re linking our Javascript at the end of the body so that it’s the <em>last thing</em> that loads on our page.</p>

<blockquote>
  <h4 id="activity-11"><strong>ACTIVITY</strong></h4>

  <p>ADD A <code>script.js</code> FILE AND ADD A <code>&lt;script&gt;</code> tag to the end of your <code>&lt;body&gt;</code></p>

  <ol>
  <li>Create a file named <code>script.js</code> in your emberitas folder</li>
  <li>Link the javascript file at the end of the <code>&lt;body&gt;</code> using <code>&lt;script src="script.js"&gt;&lt;/script&gt;</code></li>
  </ol>
</blockquote>

<hr>

<h3>Step 2: The Javascript Browser Console</h3>

<p>Using Javascript, we want to change the background color of the page to match a color in our palette when we click on a <code>palette-btn</code>.</p>

<p>To do this, we’ll need to use Javascript to:</p>

<ol>
<li>Find all of the <code>palette-btn</code> elements</li>
<li>Tell the button to change the <code>background-color</code> of the <code>body</code> to match the <code>background-color</code> of the <code>palette-btn</code> element we clicked on.</li>
</ol>

<p>Let’s start by finding all of the elements with a class of <code>palette-btn</code>.</p>

<p>In our Javascript file, we can use some built-in Javascript functions to create a <strong>statement</strong> that find elements in our html document, and assigns it to a <strong>variable</strong> named <em>paletteButtons</em>.</p>

<pre class="prettyprint"><code class="language-javascript hljs "><span class="hljs-comment">// script.js</span>
<span class="hljs-keyword">var</span> paletteButtons = document.getElementsByClassName(<span class="hljs-string">'palette-btn'</span>)</code></pre>

<p><code>var paletteButtons =</code> creates a javascript <strong>variable</strong> named paletteButtons and sets it equal to the value on the right side of the equal sign.</p>

<p>On the right side of our statement, we’re calling the JavaScript <strong>function</strong> <code>getElementsByClassName</code> on our html <code>document</code> and passing the function the name of our class as an <strong>argument</strong>.</p>

<p>Now, a list of our <code>palette-btn</code>s is assigned to the variable <em>paletteButtons</em>.</p>

<p>If you reload the page, you won’t see anything on your page change - that’s because we’re not telling our application to <em>do</em> anything with those elements. </p>

<p>Luckily, we can access the value of the variable  <em>paletteButtons</em> directly in our browser.</p>

<p>To do this, open up the Chrome Developer Tools. There are several ways to open the console: </p>
  <ul>
    <li>On Mac, press Control + Command + J at the same time.</li>
    <li>On Windows, press Control + Shift + J simultaneously.</li>
    <li>Or, use the Toolbar: View &gt; Developer &gt; Javascript Console</li>
  </ul>


<p>Type <code>paletteButtons</code> into the console, and press enter. Now you should see a list of all the elements with the class <code>palette-btn</code> on a new line, because we stored the list in a <strong>variable</strong> named paletteButtons.</p>

<blockquote>
  <h4 id="activity-12"><strong>ACTIVITY</strong></h4>

  <p>USE THE JAVASCRIPT AND THE JAVASCRIPT CONSOLE TO FIND ALL ELEMENTS OF A CERTAIN CLASS. </p>

  <p>Some classes to try:</p>

  <ol>
  <li><code>palette-btn</code></li>
  <li><code>btn-group</code></li>
  <li><code>btn</code></li>
  </ol>
</blockquote>

<hr>

<h3>Step 3: Listen for Click Events</h3>

<p>The next thing we need to do is tell our application to do something when we click on <code>palette-btn</code> elements. In Javascript, this is called <strong>listening for click events</strong>. </p>

<p>To do this, we can add an <strong>event listener</strong> to all of our <code>`palette-btn</code>s like this:</p>



<pre class="prettyprint"><code class="language-javascript hljs "><span class="hljs-keyword">var</span> paletteButtons = document.getElementsByClassName(<span class="hljs-string">'palette-btn'</span>);

<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; paletteButtons.length; i++) {
    paletteButtons[i].addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>{</span> alert(<span class="hljs-string">'You Clicked It!'</span>)});
}</code></pre>

<p>The code above creates a <strong>for loop</strong> that allows us to iterate through each element in our <em>paletteButtons</em> list. </p>

<ul>
<li><code>var i =</code> defines the variable we want access to within our loop.</li>
<li><code>var i = 0</code> defines the original value of the variable.</li>
<li><code>i &lt; paletteButtons.length</code> tells our code to continue running <em>while</em> the i is less than the length of our list. </li>
<li><code>i++</code> adds 1 to our variable each time we go through the loop.</li>
</ul>

<p>Within our loop, we use the iterator variable from our loop (<code>i</code>) to add an eventListener to each element!</p>

<ul>
<li><code>paletteButtons[i]</code> allows us to access a specific element in the list, based on the value of <code>i</code> in the loop.</li>
<li><code>addEventListener()</code> takes two arguments: <br>
<ul><li>The first argument is the name of the event: “click”.</li>
<li>The second argument is a <strong>function</strong> that will be executed when the browser hears our event!</li></ul></li>
</ul>

<blockquote>
  <h4 id="activity-13"><strong>ACTIVITY</strong></h4>

  <p>ADD THE JAVASCRIPT CODE ABOVE TO YOUR OWN JAVASCRIPT FILE AND EXECUTE THE CODE. </p>

  <ol>
  <li>What happens? What code is our function executing? </li>
  </ol>
</blockquote>

<hr>

<h3>Step 4: Changing The Background Color</h3>

<p>We can tell that our code is doing <em>something</em> (which is 9/10’s of the battle), but it’s not doing the <em>right</em> thing. Instead of popping up an alert when we click on a <code>palette-btn</code>, we want to change the background color. </p>

<p>Seems like a big change, but it actually only requires that we write one <strong>function</strong> with one line of code in it!</p>



<pre class="prettyprint"><code class=" hljs javascript">
<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>{</span>
    <span class="hljs-keyword">return</span> document.body.style.backgroundColor = <span class="hljs-keyword">this</span>.style.backgroundColor
}</code></pre>

<p>The code above is a <strong>function</strong> - an executable snippet of code. When used as the second argument in <code>addEventListener</code>, we can get the backgroundColor of our element and use it to set the backgroundColor of the body!</p>

<pre class="prettyprint"><code class=" hljs javascript"><span class="hljs-keyword">var</span> paletteButtons = document.getElementsByClassName(<span class="hljs-string">'palette-btn'</span>);

<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; paletteButtons.length; i++) {
    paletteButtons[i].addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
      <span class="hljs-keyword">return</span> document.body.style.backgroundColor = paletteButtons[i].style.backgroundColor;
    });
}</code></pre>

<blockquote>
  <h4 id="activity-14"><strong>ACTIVITY</strong></h4>

  <p>ADD THE CODE TO MAKE THE BACKGROUND COLOR OF YOUR APP CHANGE WHEN YOU CLICK A PALETTE BUTTON.</p>

  <ol>
  <li>Take a couple minutes to read through the code and explain to a friend what each part of the code does. If you can’t remember, look back at your notes!</li>
  </ol>

  <p>Getting the basics of Javascript under your belt is one of the <em>hardest</em> things for new developers to do - It’s WEIRD, and its HARD! If you’re intrigued and want to spend more time learning the basics, try the <a href="https://www.codecademy.com/learn/javascript">Learn Javascript Course on Codecademy</a>.</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/bytheway875/emberitas-images/master/change-bg-color-js.png"></p>

<hr>

<h2 id="phase-5-creating-our-create-page">Phase 5: Creating Our Create Page</h2>

<p>Our New Color Palette page has more complicated interactions and components. But because <code>new-palette.html</code> uses many of the same design elements, we’re already halfway there!</p>

<hr>

<h3 >Step 1: Copying What We Need, Getting Rid Of What We Don’t</h3>



<p>To get started, we can copy all of the code from <code>palettes.html</code> to <code>new-palettes.html</code>. We’ll keep what we need and get rid of the rest.</p>

<blockquote>
  <h4 id="activity-15">ACTIVITY</h4>

  <p>COPY <code>palettes.html</code> into <code>new-palettes.html</code></p>

  <ol>
  <li>Copy all of the content from <code>palettes.html</code> into <code>new-palettes.html</code></li>
  <li>Remove ALL of the tags that are nested inside the <code>&lt;body&gt;</code>.</li>
  <li>Navigate to <code>new-palettes.html</code> by clicking the link to the page on <code>palettes.html</code> <br>
  <ul><li>The content of your page new page will be blank, but the background color should match the background color on <code>palettes.html</code></li></ul></li>
  </ol>
</blockquote>

<hr>

<h3 >Step 2: Add Similar Elements</h3>

<p>Let’s take a look at Chloe’s mockup for the New Color Palette Page again.</p>

<p style="text-align:center"><img src="https://raw.githubusercontent.com/bytheway875/emberitas-images/master/new-palette-mockup.png"></p>

<p>What elements do we have? What looks similar to what we’ve already done? What looks different? </p>

<blockquote>
  <h4 id="activity-16">ACTIVITY</h4>

  <p>USING OUR <strong>html tag reference</strong> (add link here) AND CHLOE’S MOCKUP, ADD AS MANY HTML ELEMENTS AS YOU CAN. </p>

  <ol>
  <li>Create a <code>&lt;div&gt;</code> with class <code>container</code>, and nest the rest of your code inside of it.</li>
  <li>Add an <code>&lt;h1&gt;</code></li>
  <li>Add an <code>&lt;h2&gt;</code> for Palette Name, and an <code>&lt;input&gt;</code> tag to allow users to enter a palette name.</li>
  <li>Add an <code>&lt;h2&gt;</code> for Palette Preview, and copy one <code>btn-group</code> from <code>palettes.html</code></li>
  </ol>
</blockquote>

<hr>

<h3>Step 3: Add New Elements</h3>

<p>In order to make the rest of our page look like our mockup, we’ve got some work to do.</p>

<p>If you’ve got the time, take a shot at creating new elements for the Edit Color Section. </p>

<p>Alternatively, you can copy and paste the new elements from our {{#link-to 'resources.beginner.stylesheet'}}stylesheet{{/link-to}} and {{#link-to 'resources.beginner.new-palette-markup'}}new_palette.html markup{{/link-to}}. </p>


<hr>
<h1 id="finished-with-part-1">Finished With Part 1</h1>
<hr>
<p style="text-align: center"><small>Created by Lydia Guarino (2016), revised by Shannon Byrne (2017)</small></p>
