<div style="text-align:center">
  <h1 id="color-palette-tutorial" style="text-align:center">Part 2 - Converting to Ember</h1>
  <p>Emberitas Track One | July 16th, 2016 | Lydia Guarino, Instructor | {{link-to
    'Back to Beginner Home'
    'resources.beginner'
  }}<br>
  <img src="https://github.com/lydiaguarino/emberitas-images/blob/master/Ember-Austin-Zoey-Half-sm.png?raw=true" alt="enter image description here" title=""></p>
</div>

<hr>

<p>Ember is a front-end javascript framework. Now that we have a little bit more context around what a framework is, let’s learn about how to convert our <em>static</em> webpages to a <em>dynamic</em> web application with Ember.</p>

<hr>

<h2 id="getting-started">Getting Started</h2>

<p>To start a new ember application, open your terminal window and run the following command from within the directory where you want your project to live.</p>

<p><code>ember new color-palette</code></p>

<p>Do some dancing while you wait for the application dependencies to install.</p>

<hr>

<p>Next, change directory (cd) into your newly created ember project directory. </p>

<p><code>cd color-palette</code></p>

<p>To test that everything is working as expected, start your local server by running the following command from your command line:</p>

<p><code>ember server</code></p>

<p>Open your browser and navigate to the following URL, where your local server is currently running the ember application:</p>

<p><code>http://localhost:4200</code></p>

<p>If you see “Welcome to Ember” or a happy little Tomster hamster, congrats! You have successfully created an Ember application!</p>

<hr>



<h2 id="how-to-kill-your-server">How to kill your server</h2>

<p>To avoid confusion, let’s kill our server for now by pressing the <code>control</code> and <code>C</code> keys at the same time (on Mac) from within our terminal window.</p>

<p>You will need to remember this command to stop your server if you need to restart it because you are seeing odd errors or so that you can easily run other commands from the terminal. </p>

<p>To restart your server, you’ll simply run <code>ember server</code> again.</p>

<hr>

<h2 id="understanding-the-ember-router">Understanding the Ember Router</h2>

<blockquote>
  <p>From the Ember docs:</p>

  <p>Imagine we are writing a web app for managing a blog. At any given time, we should be able to answer questions like What post are they looking at? and Are they editing it? In Ember.js, the answer to these questions is determined by the URL.</p>

  <p>The URL can be set in a few ways:</p>

  <p>The user loads the app for the first time. <br>
  The user changes the URL manually, such as by clicking the back button or by editing the address bar. <br>
  The user clicks a link within the app. <br>
  Some other event in the app causes the URL to change.</p>

  <p>Regardless of how the URL becomes set, the Ember router then maps the current URL to one or more route handlers. A route handler can do several things:</p>

  <p>It can render a template. <br>
  It can load a model that is then available to the template. <br>
  It can redirect to a new route, such as if the user isn’t allowed to visit that part of the app. <br>
  It can handle actions that involve changing a model or transitioning to a new route.</p>
</blockquote>

<hr>

<h2 id="routes">Routes</h2>

<p>Since the Ember Router is the core of our application, we’ll start building our application code by adding some route handlers for it to use. The routes represent the different pages in our application and will have individual URLs associated with them.</p>

<p>We’ll need three routes for our application: <br>
- A palettes route for our list view <br>
- A palettes/new route for our creation form <br>
- A palettes/edit route for our edit form</p>

<p>To create some routes, Ember CLI provides us with some handy terminal commands that will automatically create some files for us. Since the framework provides the file structure for our application, using these <em>generators</em> is a handy way to quickly and confidently wire up the primary parts of our application to work with the Ember Router. </p>

<p><code>ember g route palettes</code></p>

<pre class="prettyprint"><code class=" hljs oxygene">installing route
    <span class="hljs-keyword">create</span> app/routes/palettes.js
    <span class="hljs-keyword">create</span> app/templates/palettes.hbs
updating router
    <span class="hljs-keyword">add</span> route palettes
installing route-test
    <span class="hljs-keyword">create</span> tests/<span class="hljs-keyword">unit</span>/routes/palettes-test.js</code></pre>

<p><code>ember g route palettes/new</code></p>



<pre class="prettyprint"><code class=" hljs oxygene">installing route
    <span class="hljs-keyword">create</span> app/routes/palettes/<span class="hljs-keyword">new</span>.js
    <span class="hljs-keyword">create</span> app/templates/palettes/<span class="hljs-keyword">new</span>.hbs
updating router
    <span class="hljs-keyword">add</span> route palettes/<span class="hljs-keyword">new</span>
installing route-test
    <span class="hljs-keyword">create</span> tests/<span class="hljs-keyword">unit</span>/routes/palettes/<span class="hljs-keyword">new</span>-test.js</code></pre>

<p><code>ember g route palettes/edit</code></p>



<pre class="prettyprint"><code class=" hljs oxygene">installing route
    <span class="hljs-keyword">create</span> app/routes/palettes/edit.js
    <span class="hljs-keyword">create</span> app/templates/palettes/edit.hbs
updating router
    <span class="hljs-keyword">add</span> route palettes/edit
installing route-test
    <span class="hljs-keyword">create</span> tests/<span class="hljs-keyword">unit</span>/routes/palettes/edit-test.js</code></pre>

<hr>



<h2 id="adding-an-application-template">Adding an application template</h2>

<p>You can see that we automatically got some templates when we ran the generator for our routes. For our application, we need a couple of additional special templates. </p>

<p>The first special template is the <code>application template</code>. This template allows us to wrap all of our other templates in some consistent context. In most applications, this is where things like your nav bar or footer might go - things that should appear on every page of your application.</p>

<p>We’ll be using this template to wrap all of our page content in our bootstrap responsive grid.</p>

<p><code>ember g template application</code></p>

<pre class="prettyprint"><code class=" hljs sql">installing template
    <span class="hljs-operator"><span class="hljs-keyword">create</span> app/templates/application.hbs</span></code></pre>

<hr>

<h2 id="adding-an-index-template">Adding an index template</h2>

<p>Next, we need to add a template for our list view. Out of the box, Ember assumes that you might want to build pages with <em>nested</em> content - for example, you may want a route that shows a list of blog posts on one side of the screen and also renders an individual blog post on the right side of the screen when you click one of the items.</p>

<p>This is a very powerful option, but not one that we will be using for our application.</p>

<p>Since our design doesn’t need any nested templates, we can add a special template called an <code>index</code> template to render our list view without any nested content:</p>

<p><code>ember g template palettes/index</code></p>

<pre class="prettyprint"><code class=" hljs oxygene">installing template
    <span class="hljs-keyword">create</span> app/templates/palettes/<span class="hljs-keyword">index</span>.hbs</code></pre>

<hr>

<h2 id="adding-a-partial-for-our-form">Adding a partial for our form</h2>

<p>Next, we need a special type of template called a <em>partial</em>. <br>
Partials allow you to create templates that will be reused in more than one place. Since both our new and edit pages will use exactly the same form, we can use a partial to use the same code in both places without having to have two copies of it. </p>

<blockquote>
  <p>Note that Ember provides another structure that we could use for this purpose called a “component”. For simplicity purposes, we’ll stick to a partial for now, but it would be a good extension to research and implement our form as a component, should you feel up to the challenge.</p>
</blockquote>

<p>For now, let’s go ahead and generate a partial template for our form. By convention, partial template names start with a dash.</p>

<p><code>ember g template -palette-form</code></p>

<pre class="prettyprint"><code class=" hljs lasso">installing template
    create app/templates<span class="hljs-subst">/</span><span class="hljs-attribute">-palette</span><span class="hljs-attribute">-form</span><span class="hljs-built_in">.</span>hbs</code></pre>

<hr>

<h2 id="adding-bootstrap">Adding Bootstrap</h2>

<p>Remember adding bootstrap to our static pages by adding the <code>&lt;link&gt;</code> tag in our HTML head? In an Ember application, we can use a special install command to import bootstrap directly into our project, instead. There are a ton of awesome <em>add-ons</em> and libraries you can incorporate into your project, simply by running the install command with the library name.</p>

<blockquote>
  <p>One of my favorite resources for researching and installing Ember Add Ons is a fantastic website called the <a href="https://emberobserver.com/">Ember Observer.</a></p>
</blockquote>

<p>To install bootstrap, run the following command:</p>

<p><code>ember install ember-bootstrap</code></p>

<hr>

<h2 id="copying-over-our-html-templates">Copying over our HTML templates</h2>

<p>Under the hood, Ember templates are just HTML with some special sauce that lets us dynamically swap out the content that is displayed on the page. This means that all of the HTML we wrote earlier today can be directly ported over to our new application.</p>

<blockquote>
  <p>The special sauce is some templating syntax called <em>Handlebars</em> - so named for the use of double curly braces to denote dynamic content within the template. The creators thought the curly braces looked like Handlebar mustaches: <code>\{{dynamic-content}}</code></p>

  <p>The particular flavor of Handlebars that modern Ember applications use is called HTMLbars and uses the file extension <code>.hbs</code>.</p>
</blockquote>

<p>Let’s copy over our templates from this morning into our brand new <em>Handlebars</em> Ember templates.</p>

<hr>

<h2 id="using-an-application-template">Using an application template</h2>

<p>Both our list view and our form view have some duplicate context that we can consolidate into our new application template.</p>

<p>Ember uses a special handlebars helper to designate where any nested content will be rendered into the page. Since we want all of our pages to be rendered inside of the bootstrap grid, we can add the wrapper divs for the container, row and column around this special helper called the <code>\{{outlet}}</code> helper. All of our other templates will get rendered into this special placeholder and will automatically include the wrapping content. </p>

<pre class="prettyprint"><code class=" hljs xml"><span class="hljs-comment">&lt;!-- app/templates/application.hbs --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"container"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"row"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"col-md-6 col-sm-8 col-md-offset-3 col-sm-offset-2"</span>&gt;</span>
      \{{outlet}}
    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></code></pre>

<hr>

<h2 id="building-our-palettes-list-template">Building our palettes list template</h2>

<p>Next, we’ll take the list view content that is <em>different</em> than the form view content and copy it into our palettes/index template.</p>

<pre class="prettyprint"><code class=" hljs xml"><span class="hljs-comment">&lt;!-- app/templates/palettes/index.hbs --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>Color Palettes<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-title">h2</span>&gt;</span>Add a Palette<span class="hljs-tag">&lt;/<span class="hljs-title">h2</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"palette.html"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn-group color-palette empty-palette"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-title">h2</span>&gt;</span>Tropical<span class="hljs-tag">&lt;/<span class="hljs-title">h2</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"palette.html"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn-group color-palette"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"background-color:rgb(217,33,32)"</span> &gt;</span>217,33,32<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"background-color:rgb(231,116,47)"</span>&gt;</span>231,116,47<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"background-color:rgb(223,165,58)"</span>&gt;</span>223,165,58<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"background-color:rgb(177,190,78)"</span>&gt;</span>177,190,78<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"background-color:rgb(109,179,136)"</span>&gt;</span>109,179,136<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-title">h2</span>&gt;</span>Cool<span class="hljs-tag">&lt;/<span class="hljs-title">h2</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"palette.html"</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn-group color-palette"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"background-color:rgb(70,131,193)"</span>&gt;</span>70,131,193<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"background-color:rgb(63,78,161)"</span>&gt;</span>63,78,161<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"background-color:rgb(120,28,129)"</span>&gt;</span>120,28,129<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"background-color:rgb(0,0,0)"</span>&gt;</span>0,0,0<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"background-color:rgb(238,238,238)"</span>&gt;</span>238,238,238<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span></code></pre>

<hr>

<h2 id="using-a-partial-for-our-form">Using a partial for our form</h2>

<p>Now we’ll copy over our HTML for our form into the partial template:</p>

<pre class="prettyprint"><code class=" hljs xml"><span class="hljs-comment">&lt;!-- app/templates/-palette-form.hbs --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>Tropical<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">form</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">h2</span>&gt;</span>Palette Name<span class="hljs-tag">&lt;/<span class="hljs-title">h2</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"palette-name-input form-control"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">placeholder</span>=<span class="hljs-value">"New Palette"</span>&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-title">h2</span>&gt;</span>Palette Preview<span class="hljs-tag">&lt;/<span class="hljs-title">h2</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn-group color-palette"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"background-color:rgb(217,33,32)"</span> &gt;</span>217,33,32<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"background-color:rgb(231,116,47)"</span>&gt;</span>231,116,47<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"background-color:rgb(223,165,58)"</span>&gt;</span>223,165,58<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"background-color:rgb(177,190,78)"</span>&gt;</span>177,190,78<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"background-color:rgb(109,179,136)"</span>&gt;</span>109,179,136<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-title">h2</span>&gt;</span>Edit Color<span class="hljs-tag">&lt;/<span class="hljs-title">h2</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn-group"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn preview-tile"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">"background-color:rgb(217,33,32)"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"color-input-group"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"color-input-label"</span>&gt;</span>R<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"color-text-input form-control"</span> <span class="hljs-attribute">maxlength</span>=<span class="hljs-value">"3"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"color-range-input pull-right"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"range"</span> <span class="hljs-attribute">step</span>=<span class="hljs-value">1</span> <span class="hljs-attribute">min</span>=<span class="hljs-value">0</span> <span class="hljs-attribute">max</span>=<span class="hljs-value">255</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"color-input-group"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"color-input-label"</span>&gt;</span>G<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"color-text-input form-control"</span> <span class="hljs-attribute">maxlength</span>=<span class="hljs-value">"3"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"color-range-input pull-right"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"range"</span> <span class="hljs-attribute">step</span>=<span class="hljs-value">1</span> <span class="hljs-attribute">min</span>=<span class="hljs-value">0</span> <span class="hljs-attribute">max</span>=<span class="hljs-value">255</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"color-input-group"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"color-input-label"</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"color-text-input form-control"</span> <span class="hljs-attribute">maxlength</span>=<span class="hljs-value">"3"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"color-range-input pull-right"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"range"</span> <span class="hljs-attribute">step</span>=<span class="hljs-value">1</span> <span class="hljs-attribute">min</span>=<span class="hljs-value">0</span> <span class="hljs-attribute">max</span>=<span class="hljs-value">255</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn-group form-actions"</span> <span class="hljs-attribute">role</span>=<span class="hljs-value">"group"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"palettes.html"</span>&gt;</span>Cancel<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"palettes.html"</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"submit"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"Save"</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span></code></pre>

<hr>



<h2 id="referencing-our-partial-in-our-edit-and-new-templates">Referencing our partial in our edit and new templates</h2>

<p>We’ve got two different templates where we want to use our form. Partials make this painless by letting us drop in a single line of Handlebars to pull in the content from the partial.</p>

<p>We’ll add the partial to the new and edit templates using the <code>\{{partial}}</code> helper. </p>

<p>Note that since there is no further nested content for these templates, we can simply remove the <code>\{{outlet}}</code> helpers that were automatically added to our templates when we generated our routes.</p>

<pre class="prettyprint"><code class=" hljs xml"><span class="hljs-comment">&lt;!-- app/templates/palettes/new.hbs --&gt;</span>
\{{partial 'palette-form'}}</code></pre>



<pre class="prettyprint"><code class=" hljs xml"><span class="hljs-comment">&lt;!-- app/templates/palettes/edit.hbs --&gt;</span>
\{{partial 'palette-form'}}</code></pre>

<hr>

<h2 id="adding-in-our-styles">Adding in our styles</h2>

<p>Ember provides us a great place to add in our styles, right out of the box. We don’t have to mess with linking up style sheets in Ember as long as we add our styles to the app.css file.</p>

<p>We can simply copy our styles directly into the supplied styles/app.css file.</p>

<pre class="prettyprint"><code class=" hljs css"><span class="hljs-comment">/* app/styles/app.css */</span>

<span class="hljs-tag">body</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-hexcolor">#1C1F24</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-hexcolor">#586073</span></span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-tag">h1</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">font-family</span>:<span class="hljs-value"> <span class="hljs-string">'Pacifico'</span>, cursive</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">70</span>px</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">margin-top</span>:<span class="hljs-value"> <span class="hljs-number">50</span>px</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">padding-bottom</span>:<span class="hljs-value"> <span class="hljs-number">20</span>px</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">text-align</span>:<span class="hljs-value"> center</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-tag">h2</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">18</span>px</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.btn-group</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> <span class="hljs-number">100</span>%</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">margin-bottom</span>:<span class="hljs-value"> <span class="hljs-number">12</span>px</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">margin-top</span>:<span class="hljs-value"> <span class="hljs-number">12</span>px</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.color-palette</span> <span class="hljs-class">.btn</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> <span class="hljs-number">20</span>%</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value"> <span class="hljs-number">50</span>px</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border</span>:<span class="hljs-value"> none</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">10</span>px</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> transparent</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.color-palette</span> <span class="hljs-class">.btn</span><span class="hljs-pseudo">:hover</span>, <span class="hljs-class">.color-palette</span> <span class="hljs-class">.btn</span><span class="hljs-pseudo">:focus</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> <span class="hljs-hexcolor">#1C1F24</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border</span>:<span class="hljs-value"> <span class="hljs-number">2</span>px solid <span class="hljs-hexcolor">#1C1F24</span></span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.empty-palette</span> <span class="hljs-class">.btn</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> transparent</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border</span>:<span class="hljs-value"> <span class="hljs-number">1</span>px solid <span class="hljs-hexcolor">#586073</span></span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.empty-palette</span><span class="hljs-pseudo">:hover</span> <span class="hljs-class">.btn</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">border</span>:<span class="hljs-value"> <span class="hljs-number">1</span>px solid white</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.palette-name-input</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> <span class="hljs-number">100</span>%</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">margin-top</span>:<span class="hljs-value"> <span class="hljs-number">24</span>px</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">margin-bottom</span>:<span class="hljs-value"> <span class="hljs-number">24</span>px</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.preview-tile</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> <span class="hljs-number">100</span>%</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value"> <span class="hljs-number">50</span>px</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">margin-bottom</span>:<span class="hljs-value"> <span class="hljs-number">18</span>px</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.color-input-group</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> <span class="hljs-number">100</span>%</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">margin-bottom</span>:<span class="hljs-value"> <span class="hljs-number">6</span>px</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.color-input-label</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">24</span>px</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> <span class="hljs-number">10</span>%</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value"> middle</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.color-text-input</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> <span class="hljs-number">20</span>%</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">margin</span>:<span class="hljs-value"> <span class="hljs-number">2</span>%</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> inline-block</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.color-input-group</span> <span class="hljs-class">.color-range-input</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> <span class="hljs-number">68</span>%</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">margin-top</span>:<span class="hljs-value"> <span class="hljs-number">18</span>px</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.form-actions</span> <span class="hljs-class">.btn</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"> <span class="hljs-number">33.3</span>%</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">padding</span>:<span class="hljs-value"> <span class="hljs-number">12</span>px</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">margin-top</span>:<span class="hljs-value"> <span class="hljs-number">12</span>px</span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">background-color</span>:<span class="hljs-value"> <span class="hljs-hexcolor">#586073</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">border</span>:<span class="hljs-value"> <span class="hljs-number">1</span>px solid <span class="hljs-hexcolor">#1C1F24</span></span></span>;
  <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> white</span></span>;
<span class="hljs-rule">}</span></span>

<span class="hljs-class">.form-actions</span> <span class="hljs-class">.btn</span><span class="hljs-pseudo">:hover</span> <span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">opacity</span>:<span class="hljs-value"> .<span class="hljs-number">8</span></span></span>;
<span class="hljs-rule">}</span></span>
</code></pre>

<hr>

<h2 id="importing-a-google-font">Importing a Google Font</h2>

<p>The last thing we linked in our HTML file was the fancy Pacifico font from Google Fonts. In our Ember application, we can <em>import</em> the font directly into our css file with some special syntax.</p>

<p>Add Pacifico to your css file by adding this line to the top of the file:</p>

<p><code>@import url(https://fonts.googleapis.com/css?family=Pacifico);</code></p>

<hr>

<h2 id="how-are-things-looking">How are things looking?</h2>

<p>At this point, we’ve successfully converted everything from our static web pages over to our new Ember application context.</p>

<p>Let’s run our <code>ember server</code> command again from our terminal window and checkout how our application is looking!</p>

<p>To take a look at our palettes list page, navigate to: <br>
<code>http://localhost:4200/palettes</code></p>

<p>To checkout how the form is looking, navigate to: <br>
<code>http://localhost:4200/edit</code></p>

<p>If your application looks like the image below - congratulations! You’ve reached parity with our static web pages and are ready to start layering on some Ember magic.</p>

<p><img src="https://github.com/lydiaguarino/emberitas-images/blob/master/comps.png?raw=true" alt="enter image description here" title=""></p>

<hr>

<h1 id="the-ember-magic-begins">The Ember Magic Begins</h1>

<h2 id="wiring-up-our-interactions">Wiring up our interactions</h2>

<p>Ember creates <em>single-page applications</em>, which means that instead of the server sending us back an individual HTML page when we visit the application’s URL, it actually sends us back the entire application all packaged up together. This means that things like links work a little differently than they did with our static pages. The Ember Router knows how to interpret URLs associated with each of the internal Ember Routes, but we have to use some special handlebars helpers so that it recognizes the difference between <em>internal</em> links and <em>external</em> links.</p>

<hr>



<h2 id="working-with-link-to-helpers">Working with link-to helpers</h2>

<p>The first thing we need to swap out to get our application to work as expected are the <code>&lt;a&gt;</code> tags we were previously using to link between our two views. We’ll replace them with some special Handlebars helpers called <code>\{{#link-to}}</code> helpers, since all of our links are currently <em>internal</em> links, meaning they will transition the user to another page within our application:</p>

<blockquote>
  <p>A quick note about Handlebars helpers - many of the helpers are special replacements for standard HTML tags. The link-to helper is one such helper. This means you can add things like the class attribute inside of the opening handlebars tag, just like you would with an HTML tag.</p>

  <p>The major difference is that you will no longer have an href attribute on the link and will specify the internal route name in quotation marks instead.</p>

  <p>Here is an example of the structure of a link-to helper:</p>

  <pre class="prettyprint"><code class=" hljs handlebars"><span class="xml"><span class="css"></span></span><span class="hljs-expression">\{{<span class="hljs-begin-block">#link-to </span>'<span class="hljs-variable">name-of-route</span>' <span class="hljs-variable">class</span>='<span class="hljs-variable">my-class</span>'}}</span><span class="xml"><span class="css">
   <span class="hljs-tag">Link</span> <span class="hljs-tag">Content</span>
</span></span><span class="hljs-expression">\{{<span class="hljs-end-block">/link-to</span>}}</span><span class="xml"><span class="css"></span></span></code></pre>
</blockquote>

<p>Replace all of the <code>&lt;a&gt;</code> tags in our list and form templates with the appropriate link-to helpers. Be sure to keep any classes or other attributes that were applied to the <code>&lt;a&gt;</code> tags.</p>

<p>Here is a list of the three link-tos you will need and the naming conventions for the internal routes we’ll be using: <br>
<code>\{{#link-to 'palettes.edit'}}\{{/link-to}}</code> <br>
<code>\{{#link-to 'palettes.new'}}\{{/link-to}}</code> <br>
<code>\{{#link-to 'palettes'}}\{{/link-to}}</code></p>

<hr>

<h2 id="working-with-dynamic-content">Working with dynamic content</h2>

<p>Up to this point, we’ve been working with static web pages, where all the content is written directly in our HTML.</p>

<p>To make our application dynamic, we will need to start thinking about the items in our list and the information that is backing our form and edit views as <em>dynamic data</em>.</p>

<p>To start converting the items displayed in our list to dynamic data, let’s take a look at how they could be represented as <em>JavaScript Objects</em>.</p>

<p>JavaScript Objects are a way of describing an item by its traits. Let’s take a look at what some objects might look like for our palette list view.</p>

<blockquote>
  <p>This is a good time to talk about two very important structures in JavaScript - Arrays and Objects.</p>

  <p><strong>Arrays</strong> are ordered lists of items. They use the following syntax: <br>
  <code>[ thing-one, thing-two, thing-three ]</code></p>

  <p>Ordered lists, or <em>arrays</em> are incredibly useful when you want to represent a collection of things. Our list view will have a collection of palettes as its dynamic data and we’ll be using an array to represent it.</p>

  <p>The second important structure is called an <strong>Object</strong>. Objects are data structures that allow you to describe an item by a list of traits. They are structured to include a series of key-value pairs where the key is the name of the trait.</p>

  <p>They look something like this: <br>
  <code>{ name: 'Jane', age: 27, eyeColor: 'green' }</code></p>

  <p>Each individual palette in our list can be represented as an object. Note that the value of a key in an object can essentially be any type of data structure, including another object or an array of objects.</p>
</blockquote>

<p>Now that we know a little bit about how objects and arrays look and work, let’s set the model (the dynamic data backing our template) on our palettes route to use an array of objects representing our collection of palettes.</p>

<pre class="prettyprint"><code class=" hljs handlebars"><span class="xml"><span class="css"><span class="hljs-comment">/* app/routes/palettes.js */</span>

<span class="hljs-tag">import</span> <span class="hljs-tag">Ember</span> <span class="hljs-tag">from</span> '<span class="hljs-tag">ember</span>';

<span class="hljs-tag">export</span> <span class="hljs-tag">default</span> <span class="hljs-tag">Ember</span><span class="hljs-class">.Route</span><span class="hljs-class">.extend</span>(<span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">model() {
    return [
      {
        id</span>:<span class="hljs-value"> <span class="hljs-number">1</span>,
        name: <span class="hljs-string">'Tropical'</span>,
        creator: <span class="hljs-string">'YOUR NAME'</span>,
        colors: [
          { r: <span class="hljs-number">217</span>, g: <span class="hljs-number">33</span>, b: <span class="hljs-number">32</span>, styleString: <span class="hljs-string">'background-color:rgb(217,33,32)'</span>, labelString: <span class="hljs-string">'217,33,32'</span></span></span></span>},
          <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">r</span>:<span class="hljs-value"> <span class="hljs-number">231</span>, g: <span class="hljs-number">116</span>, b: <span class="hljs-number">47</span>, styleString: <span class="hljs-string">'background-color:rgb(231,116,47)'</span>, labelString: <span class="hljs-string">'231,116,47'</span></span></span></span>},
          <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">r</span>:<span class="hljs-value"> <span class="hljs-number">223</span>, g: <span class="hljs-number">165</span>, b: <span class="hljs-number">58</span>, styleString: <span class="hljs-string">'background-color:rgb(223,165,58)'</span>, labelString: <span class="hljs-string">'223,165,58'</span></span></span></span>},
          <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">r</span>:<span class="hljs-value"> <span class="hljs-number">177</span>, g: <span class="hljs-number">190</span>, b: <span class="hljs-number">78</span>, styleString: <span class="hljs-string">'background-color:rgb(177,190,78)'</span>, labelString: <span class="hljs-string">'177,190,78'</span></span></span></span>},
          <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">r</span>:<span class="hljs-value"> <span class="hljs-number">109</span>, g: <span class="hljs-number">179</span>, b: <span class="hljs-number">136</span>, styleString: <span class="hljs-string">'background-color:rgb(109,179,136)'</span>, labelString: <span class="hljs-string">'109,179,136'</span></span></span></span>}
        ]
      },
      <span class="hljs-rules">{
        <span class="hljs-rule"><span class="hljs-attribute">id</span>:<span class="hljs-value"> <span class="hljs-number">2</span>,
        name: <span class="hljs-string">'Cool'</span>,
        creator: <span class="hljs-string">'YOUR NAME'</span>,
        colors: [
          { r: <span class="hljs-number">70</span>, g: <span class="hljs-number">131</span>, b: <span class="hljs-number">193</span>, styleString: <span class="hljs-string">'background-color:rgb(70,131,193)'</span>, labelString: <span class="hljs-string">'70,131,193'</span></span></span></span>},
          <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">r</span>:<span class="hljs-value"> <span class="hljs-number">63</span>, g: <span class="hljs-number">78</span>, b: <span class="hljs-number">161</span>, styleString: <span class="hljs-string">'background-color:rgb(63,78,161)'</span>, labelString: <span class="hljs-string">'63,78,161'</span></span></span></span>},
          <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">r</span>:<span class="hljs-value"> <span class="hljs-number">120</span>, g: <span class="hljs-number">28</span>, b: <span class="hljs-number">129</span>, styleString: <span class="hljs-string">'background-color:rgb(120,28,129)'</span>, labelString: <span class="hljs-string">'120,28,129'</span></span></span></span>},
          <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">r</span>:<span class="hljs-value"> <span class="hljs-number">0</span>, g: <span class="hljs-number">0</span>, b: <span class="hljs-number">0</span>, styleString: <span class="hljs-string">'background-color:rgb(0,0,0)'</span>, labelString: <span class="hljs-string">'0, 0, 0'</span></span></span></span>},
          <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">r</span>:<span class="hljs-value"> <span class="hljs-number">238</span>, g: <span class="hljs-number">238</span>, b: <span class="hljs-number">238</span>, styleString: <span class="hljs-string">'background-color:rgb(238,238,238)'</span>, labelString: <span class="hljs-string">'238,238,238'</span></span></span></span>}
        ]
      }
    ];
  }
});
</span></span></code></pre>

<p>The models for our edit and new routes will be a single object -representing a single item in our palettes collection. Let’s update the model hook for these two routes to return a single palette object.</p>

<pre class="prettyprint"><code class=" hljs handlebars"><span class="xml"><span class="css"><span class="hljs-comment">/* app/routes/palettes/edit.js and app/routes/palettes/new.js */</span>
<span class="hljs-tag">import</span> <span class="hljs-tag">Ember</span> <span class="hljs-tag">from</span> '<span class="hljs-tag">ember</span>';

<span class="hljs-tag">export</span> <span class="hljs-tag">default</span> <span class="hljs-tag">Ember</span><span class="hljs-class">.Route</span><span class="hljs-class">.extend</span>(<span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">model() {
    return {
      id</span>:<span class="hljs-value"> <span class="hljs-number">1</span>,
      name: <span class="hljs-string">'Tropical'</span>,
      creator: <span class="hljs-string">'YOUR NAME'</span>,
      colors: [
        { r: <span class="hljs-number">217</span>, g: <span class="hljs-number">33</span>, b: <span class="hljs-number">32</span>, styleString: <span class="hljs-string">'background-color:rgb(217,33,32)'</span>, labelString: <span class="hljs-string">'217,33,32'</span></span></span></span>},
        <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">r</span>:<span class="hljs-value"> <span class="hljs-number">231</span>, g: <span class="hljs-number">116</span>, b: <span class="hljs-number">47</span>, styleString: <span class="hljs-string">'background-color:rgb(231,116,47)'</span>, labelString: <span class="hljs-string">'231,116,47'</span></span></span></span>},
        <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">r</span>:<span class="hljs-value"> <span class="hljs-number">223</span>, g: <span class="hljs-number">165</span>, b: <span class="hljs-number">58</span>, styleString: <span class="hljs-string">'background-color:rgb(223,165,58)'</span>, labelString: <span class="hljs-string">'223,165,58'</span></span></span></span>},
        <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">r</span>:<span class="hljs-value"> <span class="hljs-number">177</span>, g: <span class="hljs-number">190</span>, b: <span class="hljs-number">78</span>, styleString: <span class="hljs-string">'background-color:rgb(177,190,78)'</span>, labelString: <span class="hljs-string">'177,190,78'</span></span></span></span>},
        <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">r</span>:<span class="hljs-value"> <span class="hljs-number">109</span>, g: <span class="hljs-number">179</span>, b: <span class="hljs-number">136</span>, styleString: <span class="hljs-string">'background-color:rgb(109,179,136)'</span>, labelString: <span class="hljs-string">'109,179,136'</span></span></span></span>}
      ]
    };
  }
});</span></span></code></pre>

<hr>



<h2 id="adding-dynamic-placeholders-to-our-templates">Adding dynamic placeholders to our templates</h2>

<p>Now that we have some dynamic data to back our templates, we need to update our templates to use dynamic placeholders. You can think of these as the blanks in a madlibs document.</p>

<p>First, let’s update our palettes list view to dynamically display each item in our list of palettes, instead of hard-coding our two example palettes.</p>

<p>We’ll do this with another special Handlebars helper called an <code>\{{#each}}</code> helper.</p>

<p>Each helpers can be used with any collection of data that is stored as an array. The each helper <em>loops</em> over the array and performs the same action for each item in the array. This gives us a streamlined way to add a list elements to our HTML for each item in the array.</p>

<p>The structure is pretty straight-forward, but the syntax can be a little confusing when you first look at it.</p>

<p>Here’s how the syntax works:</p>



<pre class="prettyprint"><code class=" hljs handlebars"><span class="xml"><span class="css"></span></span><span class="hljs-expression">\{{<span class="hljs-begin-block">#<span class="hljs-keyword">each</span> </span>[<span class="hljs-variable">array</span> <span class="hljs-variable">to</span> <span class="hljs-variable">loop</span> <span class="hljs-variable">over</span>] <span class="hljs-variable">as</span> |<span class="hljs-variable">item</span> <span class="hljs-variable"><span class="hljs-keyword">in</span></span> <span class="hljs-variable">array</span>|}}</span><span class="xml"><span class="css">
    &lt;<span class="hljs-tag">div</span>&gt;<span class="hljs-tag">Repeated</span> <span class="hljs-tag">content</span> <span class="hljs-tag">for</span> <span class="hljs-tag">each</span> </span></span><span class="hljs-expression">\{{<span class="hljs-variable">item</span>}}</span><span class="xml"><span class="css">&lt;/<span class="hljs-tag">div</span>&gt;
</span></span><span class="hljs-expression">\{{<span class="hljs-end-block">/<span class="hljs-keyword">each</span></span>}}</span><span class="xml"><span class="css"></span></span></code></pre>

<blockquote>
  <p>The “|” characters in the opening each tag are called <em>pipes</em> - I like to think of them as creating a little chute that drops the variable name you want to use for an individual item into the nested block - kind of like one of the portal pipes in Super Mario. For the individual items, you can use whatever name you’d like, as long as you pass it into the nested block via the pipes.</p>
</blockquote>

<p>For our list of palettes view, we have TWO each loops we need to make - one for the collection of palettes, and one for the collection of colors within a palette.</p>

<p>Let’s take a look:</p>

<pre class="prettyprint"><code class=" hljs handlebars"><span class="xml"><span class="css">&lt;!<span class="hljs-tag">--</span> <span class="hljs-tag">app</span>/<span class="hljs-tag">templates</span>/<span class="hljs-tag">palettes</span>/<span class="hljs-tag">index</span><span class="hljs-class">.hbs</span> <span class="hljs-tag">--</span>&gt;
...
</span></span><span class="hljs-expression">\{{<span class="hljs-begin-block">#<span class="hljs-keyword">each</span> model as </span>|<span class="hljs-variable">palette</span>|}}</span><span class="xml"><span class="css">
  &lt;<span class="hljs-tag">h2</span>&gt;</span></span><span class="hljs-expression">\{{<span class="hljs-variable">palette.name</span>}}</span><span class="xml"><span class="css">&lt;/<span class="hljs-tag">h2</span>&gt;
</span></span><span class="hljs-expression">\{{<span class="hljs-begin-block">#link-to </span>'<span class="hljs-variable">palettes.edit</span>' <span class="hljs-variable">class</span>=<span class="hljs-string">"btn-group color-palette"</span>}}</span><span class="xml"><span class="css">
</span></span><span class="hljs-expression">\{{<span class="hljs-begin-block">#<span class="hljs-keyword">each</span> palette.colors as </span>|<span class="hljs-variable">color</span>|}}</span><span class="xml"><span class="css">
      &lt;<span class="hljs-tag">button</span> <span class="hljs-tag">class</span>="<span class="hljs-tag">btn</span>" <span class="hljs-tag">type</span>="<span class="hljs-tag">button</span>" <span class="hljs-tag">style</span>=</span></span><span class="hljs-expression">\{{<span class="hljs-variable">color.styleString</span>}}</span><span class="xml"><span class="css"> &gt;</span></span><span class="hljs-expression">\{{<span class="hljs-variable">color.labelString</span>}}</span><span class="xml"><span class="css">&lt;/<span class="hljs-tag">button</span>&gt;
    </span></span><span class="hljs-expression">\{{<span class="hljs-end-block">/<span class="hljs-keyword">each</span></span>}}</span><span class="xml"><span class="css">
  </span></span><span class="hljs-expression">\{{<span class="hljs-end-block">/link-to</span>}}</span><span class="xml"><span class="css">
</span></span><span class="hljs-expression">\{{<span class="hljs-end-block">/<span class="hljs-keyword">each</span></span>}}</span><span class="xml"><span class="css"></span></span></code></pre>

<p>Here, we’re looping over all the palettes in our model and displaying the palette name. We’re then looping over each color in the palette and adding one of our buttons with the style attribute dynamically set to match the styleString property of the color.</p>

<p>Now, we’ll do the same to dynamically display the colors in the palette preview of our form:</p>

<pre class="prettyprint"><code class=" hljs xml"><span class="hljs-comment">&lt;!-- app/templates/-palette-form.hbs --&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>\{{model.name}}<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">form</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">h2</span>&gt;</span>Palette Name<span class="hljs-tag">&lt;/<span class="hljs-title">h2</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"palette-name-input form-control"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span> <span class="hljs-attribute">placeholder</span>=<span class="hljs-value">"New Palette"</span>&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-title">h2</span>&gt;</span>Palette Preview<span class="hljs-tag">&lt;/<span class="hljs-title">h2</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn-group color-palette"</span>&gt;</span>
    \{{#each model.colors as |color|}}
      <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"btn"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">{{color.styleString}}</span>&gt;</span>{{color.labelString}}<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
    \{{/each}}
  <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
  ...
</code></pre>

<hr>



<h1 id="working-with-controllers">Working with Controllers</h1>

<p>In the lecture, we learned that controllers are the logistics handlers between the template and the data backing them. For simplicity’s sake, we’ll consider the controller the proper layer to handle any actions the user triggers by interacting with the user interface - such as clicking buttons or modifying a form.</p>

<p>Controllers also provide a convenient way to add extra display-specific information to our data - called <em>decoration</em> - without having to include it in our model. More on this in a bit.</p>

<blockquote>
  <p>It is important to note that Ember provides three appropriate places to handle actions - controllers, routes and components. The nuance of deciding which one of these is best for your use case is outside the scope of this tutorial but it is important to know that you have options and can research each of these further. For now, we’ll focus on handling actions at the controller layer.</p>
</blockquote>

<p>In our design, the list view has some buttons, but they are all links, which don’t need any additional support from controllers. Our form, however, has all sorts of input fields and buttons that aren’t really doing anything at the moment. This is because we need a controller to wire them up properly.</p>

<p>We have two routes that use our form, so we’ll need a controller for each. We can use a generator like we did before to have Ember automatically wire the controllers up properly to our routes and templates.</p>

<blockquote>
  <p>Remember that you might need to kill your server to run commands from the command line: <code>CTRL+C</code></p>
</blockquote>

<p>We’ll need one for our edit route:</p>

<p><code>ember g controller palettes/edit</code></p>

<pre class="prettyprint"><code class=" hljs oxygene">installing controller
  <span class="hljs-keyword">create</span> app/controllers/palettes/edit.js
installing controller-test
  <span class="hljs-keyword">create</span> tests/<span class="hljs-keyword">unit</span>/controllers/palettes/edit-test.js</code></pre>

<p>And one for our new route:</p>

<p><code>ember g controller palettes/new</code></p>

<pre class="prettyprint"><code class=" hljs oxygene">installing controller
  <span class="hljs-keyword">create</span> app/controllers/palettes/<span class="hljs-keyword">new</span>.js
installing controller-test
  <span class="hljs-keyword">create</span> tests/<span class="hljs-keyword">unit</span>/controllers/palettes/<span class="hljs-keyword">new</span>-test.js</code></pre>



<h2 id="adding-our-first-action">Adding our first action</h2>

<p><img src="https://github.com/lydiaguarino/emberitas-images/blob/master/set-focus-color.gif?raw=true" alt="enter image description here" title=""></p>

<p>In our form, we want to be able to modify individual colors. The first step is for us to provide the user with a means of selecting the color they want to set or adjust.</p>

<p>To do this, we’ll add an <code>\{{action}}</code> to each of the color buttons in our palette preview. When the user clicks the button, we’ll wire up an action to set a property on our controller that keeps track of the selected color and displays it in the selected color preview.</p>

<p>Let’s start by adding the action to our buttons. When a clickable element is selected on a webpage, it is considered <em>in focus</em>. We’ll call the currently selected color the <code>focusColor</code>. Our action will be appropriately named - <code>setFocusColor</code> .</p>

<p>Let’s add our new <code>\{{action 'setFocusColor' color}}</code> to our palette preview buttons.</p>

<blockquote>
  <p>Note that we will need to pass the color that each button represents into our function by adding it as a <em>parameter</em> to our actions helper. You can pass parameters to actions by adding them into the action helper after the name of the action, which will be in quotations. </p>
</blockquote>

<pre class="prettyprint"><code class=" hljs r">&lt;!-- app/templates/-palette-form.hbs --&gt;
<span class="hljs-keyword">...</span>
&lt;h2&gt;Palette Preview&lt;/h2&gt;
  &lt;div class=<span class="hljs-string">"btn-group color-palette"</span>&gt;
    \{{<span class="hljs-comment">#each model.colors as |color|}}</span>
      &lt;button class=<span class="hljs-string">"btn"</span> type=<span class="hljs-string">"button"</span> style=\{{color.styleString}} \{{action <span class="hljs-string">'setFocusColor'</span> color}}&gt;\{{color.labelString}}&lt;/button&gt;
    \{{/each}}
  &lt;/div&gt;
<span class="hljs-keyword">...</span></code></pre>

<p>Now, in our controller, we’ll add our property that keeps track of the currently selected color as well as an actions hash (where we’ll put all of our action methods) with our setFocusColor action included:</p>

<blockquote>
  <p>The focusColor property is only used when the form is displayed and therefore doesn’t need to be saved or stored on our model. We can use a controller property to keep track of this kind of temporary information.</p>
</blockquote>

<pre class="prettyprint"><code class=" hljs cs"><span class="hljs-comment">/* app/controllers/palettes/new.js and app/controllers/palettes/edit.js */</span>
import Ember <span class="hljs-keyword">from</span> <span class="hljs-string">'ember'</span>;

export <span class="hljs-keyword">default</span> Ember.Controller.extend({
  focusColor: <span class="hljs-keyword">null</span>,
  actions: {
    setFocusColor(color) {
      <span class="hljs-keyword">this</span>.<span class="hljs-keyword">set</span>(<span class="hljs-string">'focusColor'</span>, color);
    }
  }
});</code></pre>

<blockquote>
  <p>Remember to add these details to BOTH the edit and the new controllers!</p>
</blockquote>

<p>The final step is to update our color preview element in our form template to display the correct <code>focusColor</code> :</p>

<pre class="prettyprint"><code class=" hljs r">&lt;!-- app/templates/-palette-form.hbs --&gt;
<span class="hljs-keyword">...</span>
  &lt;h2&gt;Edit Color&lt;/h2&gt;
  &lt;div class=<span class="hljs-string">"btn-group"</span>&gt;
    &lt;div class=<span class="hljs-string">"btn preview-tile"</span> style=\{{focusColor.styleString}}&gt;&lt;/div&gt;
  &lt;/div&gt;
<span class="hljs-keyword">...</span></code></pre>

<p>Let’s give it a try. Does clicking on a color button change the color that is displayed in the color preview? If so, congrats! You’ve just created an interactive user interface.</p>

<blockquote>
  <p>Remember that you may need to restart your server if you killed it to add the controllers:  <code>ember server</code></p>
</blockquote>

<p><img src="https://github.com/lydiaguarino/emberitas-images/blob/master/set-focus-color.gif?raw=true" alt="enter image description here" title=""></p>

<hr>

<h2 id="working-with-form-input">Working with form input</h2>

<p>One of the most magical things about Ember when you first start working with it is the power of <em>two-way bindings</em>. Bindings are a structural link between the user interface and the underlying data. They allow you to do fancy things like bind a model or controller property to an input field and then immediately see the UI change as you type into the input field:</p>

<p><img src="https://github.com/lydiaguarino/emberitas-images/blob/master/bound-properties.gif?raw=true" alt="enter image description here" title=""></p>

<blockquote>
  <p>Two-way bindings are incredibly powerful and make for some super flashy party tricks that we’ll be taking advantage of in this tutorial, but be warned that they also come with some problems of their own. </p>

  <p>There has been a shift in recent years to focus more on one-way bindings, which require a little more code to keep things in sync, but offer more control around changing the underlying data when you may or may not want to permanently alter it.</p>
</blockquote>

<p>Out of the box, Ember includes a handlebars helper to easily create two-way bindings between input fields and our data. To establish the binding, we simply set the value property on the input helper to whatever model or controller property we want to bind.</p>

<p>Let’s bind our palette name input to the name property on our model by swapping out our HTML form input for a handlebars input helper:</p>

<pre class="prettyprint"><code class=" hljs r">&lt;!-- app/templates/-palette-form.hbs --&gt;
<span class="hljs-keyword">...</span>
&lt;h2&gt;Palette Name&lt;/h2&gt;
  \{{input value=model.name class=<span class="hljs-string">"palette-name-input form-control"</span> type=<span class="hljs-string">"text"</span> placeholder=<span class="hljs-string">"New Palette"</span>}}
<span class="hljs-keyword">...</span>
</code></pre>

<p>Take it for a spin! If you type into the input field, does the page title change auto-magically?</p>

<p>Next, we’ll wire up the input fields for the colors. </p>

<blockquote>
  <p>This is a little bit more complex because we actually have TWO input fields for each of the red, green and blue component values of our rgb colors. This is so that the user can choose to type the color value into a text input, or use the fancy range inputs to select a color by incrementally adjusting the values using a slider.</p>

  <p>The input helper has a type property, just like an HTML input. We’ll have two types represented:  type=’text’ and type=’range’ </p>

  <p>Note that rgb component values are always a number between 0 and 255. We’ll use these as our min and max values for our range inputs. Similary, we’ll cap the length of characters you can type into the text inputs at 3.</p>
</blockquote>

<pre class="prettyprint"><code class=" hljs handlebars"><span class="xml"><span class="css">...
  &lt;/<span class="hljs-tag">div</span>&gt;
  &lt;<span class="hljs-tag">div</span> <span class="hljs-tag">class</span>="<span class="hljs-tag">color-input-group</span>"&gt;
    &lt;<span class="hljs-tag">span</span> <span class="hljs-tag">class</span>="<span class="hljs-tag">color-input-label</span>"&gt;<span class="hljs-tag">R</span>&lt;/<span class="hljs-tag">span</span>&gt;
  </span></span><span class="hljs-expression">\{{<span class="hljs-variable">input</span> <span class="hljs-variable">value</span>=<span class="hljs-variable">focusColor.r</span> <span class="hljs-variable">class</span>=<span class="hljs-string">"color-text-input form-control"</span> <span class="hljs-variable">maxlength</span>=<span class="hljs-string">"3"</span> <span class="hljs-variable">type</span>=<span class="hljs-string">"text"</span>}}</span><span class="xml"><span class="css">
  </span></span><span class="hljs-expression">\{{<span class="hljs-variable">input</span> <span class="hljs-variable">value</span>=<span class="hljs-variable">focusColor.r</span> <span class="hljs-variable">class</span>=<span class="hljs-string">"color-range-input pull-right"</span> <span class="hljs-variable">type</span>=<span class="hljs-string">"range"</span> <span class="hljs-variable">step</span>=1 <span class="hljs-variable">min</span>=0 <span class="hljs-variable">max</span>=255}}</span><span class="xml"><span class="css">
  &lt;/<span class="hljs-tag">div</span>&gt;
  &lt;<span class="hljs-tag">div</span> <span class="hljs-tag">class</span>="<span class="hljs-tag">color-input-group</span>"&gt;
    &lt;<span class="hljs-tag">span</span> <span class="hljs-tag">class</span>="<span class="hljs-tag">color-input-label</span>"&gt;<span class="hljs-tag">G</span>&lt;/<span class="hljs-tag">span</span>&gt;
  </span></span><span class="hljs-expression">\{{<span class="hljs-variable">input</span> <span class="hljs-variable">value</span>=<span class="hljs-variable">focusColor.g</span> <span class="hljs-variable">class</span>=<span class="hljs-string">"color-text-input form-control"</span> <span class="hljs-variable">maxlength</span>=<span class="hljs-string">"3"</span> <span class="hljs-variable">type</span>=<span class="hljs-string">"text"</span>}}</span><span class="xml"><span class="css">
  </span></span><span class="hljs-expression">\{{<span class="hljs-variable">input</span> <span class="hljs-variable">value</span>=<span class="hljs-variable">focusColor.g</span> <span class="hljs-variable">class</span>=<span class="hljs-string">"color-range-input pull-right"</span> <span class="hljs-variable">type</span>=<span class="hljs-string">"range"</span> <span class="hljs-variable">step</span>=1 <span class="hljs-variable">min</span>=0 <span class="hljs-variable">max</span>=255}}</span><span class="xml"><span class="css">
  &lt;/<span class="hljs-tag">div</span>&gt;
  &lt;<span class="hljs-tag">div</span> <span class="hljs-tag">class</span>="<span class="hljs-tag">color-input-group</span>"&gt;
    &lt;<span class="hljs-tag">span</span> <span class="hljs-tag">class</span>="<span class="hljs-tag">color-input-label</span>"&gt;<span class="hljs-tag">B</span>&lt;/<span class="hljs-tag">span</span>&gt;
  </span></span><span class="hljs-expression">\{{<span class="hljs-variable">input</span> <span class="hljs-variable">value</span>=<span class="hljs-variable">focusColor.b</span> <span class="hljs-variable">class</span>=<span class="hljs-string">"color-text-input form-control"</span> <span class="hljs-variable">maxlength</span>=<span class="hljs-string">"3"</span> <span class="hljs-variable">type</span>=<span class="hljs-string">"text"</span>}}</span><span class="xml"><span class="css">
  </span></span><span class="hljs-expression">\{{<span class="hljs-variable">input</span> <span class="hljs-variable">value</span>=<span class="hljs-variable">focusColor.b</span> <span class="hljs-variable">class</span>=<span class="hljs-string">"color-range-input pull-right"</span> <span class="hljs-variable">type</span>=<span class="hljs-string">"range"</span> <span class="hljs-variable">step</span>=1 <span class="hljs-variable">min</span>=0 <span class="hljs-variable">max</span>=255}}</span><span class="xml"><span class="css">
  &lt;/<span class="hljs-tag">div</span>&gt;</span></span></code></pre>

<p>When we click a color button to set the focus color now, we should see the input fields for the selected color auto-magically update to reflect the R, G and B component values of the currently selected color.</p>

<p><img src="https://github.com/lydiaguarino/emberitas-images/blob/master/bound-properties.gif?raw=true" alt="enter image description here" title=""></p>

<hr>



<h2 id="working-with-computed-properties">Working with computed properties</h2>

<p>Computed properties</p>

<p>By now, you’ve probably noticed that the color preview doesn’t automatically change when you modify the color input fields. We know that the fields are two-way bound, so what gives?</p>

<p>The answer is that even though the r, g and b values are changing on the color, we have <em>hard-coded</em> the values of the styleString that we are using for our inline styles.</p>

<p>What we need is a way to change the contents of that styleString when the r, g and b values of the color change.</p>

<p>This is another job for two-way binding! </p>

<blockquote>
  <p>Ember provides us with some special methods called <em>computed properties</em> that we can use for this purpose. Our computed property will take a list of other properties we want to bind or watch and allow us to spit out a new value based on those values. Anytime the underlying properties change, our computed property will automatically update to reflect those changes.</p>
</blockquote>

<p>Let’s go back to our controllers and add a new property called <code>focusColorStyleString</code>. This will be a computed property based on the r g and b values of our focusColor property:</p>

<blockquote>
  <p>Remember to add this to both your edit and new controllers</p>
</blockquote>

<pre class="prettyprint"><code class=" hljs r">/* app/controllers/palettes/new.js and app/controllers/palettes/edit.js */
<span class="hljs-keyword">...</span>
focusColorStyleString: Ember.computed(<span class="hljs-string">'focusColor.r'</span>, <span class="hljs-string">'focusColor.g'</span>, <span class="hljs-string">'focusColor.b'</span>, <span class="hljs-keyword">function</span>() {
    var r = this.get(<span class="hljs-string">'focusColor.r'</span>);
    var g = this.get(<span class="hljs-string">'focusColor.g'</span>);
    var b = this.get(<span class="hljs-string">'focusColor.b'</span>);
    <span class="hljs-keyword">if</span> (r || g || b) {
      <span class="hljs-keyword">return</span> Ember.String.htmlSafe(`background-color:rgb(${r}, ${g}, ${b})`);
    } <span class="hljs-keyword">else</span> {
      <span class="hljs-keyword">return</span> Ember.String.htmlSafe(<span class="hljs-string">'background-color:transparent; border:1px solid #586073'</span>);
    }
  })
  <span class="hljs-keyword">...</span></code></pre>

<blockquote>
  <p>There’s a lot of new syntax here, but this code is simply watching the r g and b values of the foucsColor and constructing a new string for us to use with our inline style rather than using a hard-coded value.</p>

  <p>We’ve also taken this opportunity to add a better <em>empty-state</em> to our color preview by adding a border if we detect that there is no rgb value available.</p>
</blockquote>

<p>Now we’ll need to swap out the variable we’re using in our template for the inline style on our color preview to use our new computed property:</p>

<pre class="prettyprint"><code class=" hljs r">&lt;!-- app/templates/-palette-form.hbs --&gt;
<span class="hljs-keyword">...</span>
  &lt;h2&gt;Edit Color&lt;/h2&gt;
  &lt;div class=<span class="hljs-string">"btn-group"</span>&gt;
    &lt;div class=<span class="hljs-string">"btn preview-tile"</span> style=\{{focusColorStyleString}}&gt;&lt;/div&gt;
  &lt;/div&gt;
<span class="hljs-keyword">...</span></code></pre>

<p>Time for some super flashy unicorn magic! When you select a color and change the input fields, you should now see the color preview update automatically! </p>

<blockquote>
  <p>Queue the oooooooos and ahhhhhhhhhhhs!</p>
</blockquote>

<p><img src="https://github.com/lydiaguarino/emberitas-images/blob/master/computed-property.gif?raw=true" alt="enter image description here" title=""></p>

<hr>

<h1 id="youve-made-some-pretty-freakin-neat-stuff-happen-now-would-be-a-great-time-for-a-break">You’ve made some pretty freakin’ neat stuff happen! Now would be a great time for a break.</h1>

<h2 id="working-with-a-database">Working with a database!</h2>

<p>At this point, you should be feeling pretty powerful. You’ve turned a static web page into a highly-interactive application!</p>

<p>Now it’s time for us to kick it up a notch. For the next section, we’re going to be adding a <em>persistence layer</em>. </p>

<p>Everything we’ve done so far has been fairly ephemeral - we can make changes and see them update, but as soon as we refresh our browser window, all of our changes reset and its like we never touched it. </p>

<p>For some use cases, that is totally sufficient, but for our design, we want to be able to create, edit, delete and share our color palettes with others. </p>

<p>We need a <em>place</em> to save our palettes, and that place is a database. </p>

<p>There is a ton of detail you can study about databases and associated back-end frameworks that can be used to build a persistence layer - all of which are outside the scope of this tutorial. </p>

<p>For our persistence layer, we’ll be outsourcing the details to a 3rd party provider called <strong>Firebase</strong>. </p>

<p>Firebase is an easy-to-use service that we can configure quickly to work with our application. It is essentially a hosted database platform - and they’ve provided a handy Ember add-on to get us up and running with very little code.</p>

<blockquote>
  <p>Some important notes before we continue :</p>

  <p>For simplicity, we’re providing a single firebase database instance for this tutorial. </p>

  <p>For future projects, if you want to make significant changes to your code that no longer align with the tutorial,  or if you want to make sure that your application is isolated from everyone else’s, you’ll need to create a Firebase account and configure a database just for yourself. It’s free and relatively painless to set up :)</p>

  <p>We’ll be using some filters to help isolate your palettes from everyone else’s. It is important to follow the instructions closely on this section.</p>
</blockquote>

<p>To get started, let’s install the emberfire addon: <br>
<code>ember install emberfire</code></p>



<h2 id="configuring-firebase">Configuring Firebase</h2>

<p>This next step is the only time we’ll need to dig around in any files that are NOT in our <code>app/</code> directory. We’ll need to open a file in our ember project that lives in the <code>config</code> directory called <code>environment.js</code>. </p>

<p>When you open up environment.js, you should a section beneath module.exports that starts with <code>var ENV = {</code>. Inside of this object, we’ll add all the configuration details for firebase, as shown below.</p>

<blockquote>
  <p>These are the details for the special SHARED database for this tutorial. If you want to create your own Firebase account and database, you will change this section to use your own details.</p>
</blockquote>

<pre class="prettyprint"><code class=" hljs r">// config/environment.js

module.exports = <span class="hljs-keyword">function</span>(environment) {
    var ENV = {
        firebase: {
           apiKey: <span class="hljs-string">"AIzaSyBvdiz729ZWt5XUHQhsaEeR1MrO53Q_FyA"</span>,
           authDomain: <span class="hljs-string">"emberitas-color-palette.firebaseapp.com"</span>,
           databaseURL: <span class="hljs-string">"https://emberitas-color-palette.firebaseio.com"</span>,
           storageBucket: <span class="hljs-string">"emberitas-color-palette.appspot.com"</span>
         },
         <span class="hljs-keyword">...</span></code></pre>

<p>Once you’ve added the firebase details and saved the file, you can close the environment.js file.</p>

<hr>



<h2 id="creating-models-to-work-with-our-database">Creating models to work with our database</h2>

<p>Now that we have our database set up, we’re ready to add some real models. You may remember that we added some arrays of palette objects to our routes via the model hook. Those have served us well as placeholders, but we’ll need to do some refactoring to pull in data from our database.</p>

<p>The first thing we’ll need are some real models. We learned when creating our placeholder models that we have two types of objects we are working with: Palettes and Colors. </p>

<p>Let’s generate a model for each of these: </p>

<p>Generate models <br>
<code>ember g model palette</code></p>

<pre class="prettyprint"><code class=" hljs oxygene">installing model
  <span class="hljs-keyword">create</span> app/models/palette.js
installing model-test
  <span class="hljs-keyword">create</span> tests/<span class="hljs-keyword">unit</span>/models/palette-test.js</code></pre>

<p><code>ember g model color</code></p>



<pre class="prettyprint"><code class=" hljs oxygene">installing model
  <span class="hljs-keyword">create</span> app/models/color.js
installing model-test
  <span class="hljs-keyword">create</span> tests/<span class="hljs-keyword">unit</span>/models/color-test.js</code></pre>

<blockquote>
  <p>In the lecture, we learned that Object Oriented Programming gives us a way to create a base class and unique instances of objects. The example in the lecture was a dress sewing pattern than could be used to produce a bunch of dresses that can be customized. All the dresses inherit the traits of the base class by default, but can be customized to have slightly different traits than the defaults.</p>

  <p>The same is true with Ember Data Models. Ember Data is included by default with Ember CLI, but is a separate library from Ember itself. It is worth noting that you can build Ember applications without Ember Data. </p>

  <p>Ember Data is a layer that sits between your Ember application and your backend server/database/API/whatever-you-are-using-to-store-and-handle-records and is responsible for tying records or models to the CRUD (Create, Read, Update, Destroy) actions we covered in the lecture.</p>
</blockquote>

<p>Let’s start by adding the properties we need to our new palette model. We’ll use the same structure and naming conventions as our placeholder data and add a new <em>model attribute</em> (property) called <code>creator</code> . We’ll be using the creator attribute to help us filter the results that come back so that you only get your own palettes instead of everyone’s. This is what the syntax looks like:</p>

<pre class="prettyprint"><code class=" hljs cs"><span class="hljs-comment">// app/models/palette.js</span>
import Model <span class="hljs-keyword">from</span> <span class="hljs-string">'ember-data/model'</span>;
import attr <span class="hljs-keyword">from</span> <span class="hljs-string">'ember-data/attr'</span>;
import { hasMany } <span class="hljs-keyword">from</span> <span class="hljs-string">'ember-data/relationships'</span>;

export <span class="hljs-keyword">default</span> Model.extend({
  name: attr({ defaultValue: <span class="hljs-string">'New Palette'</span> }),
  creator: attr({ defaultValue: <span class="hljs-string">'YOUR NAME'</span> }),
  colors: hasMany(<span class="hljs-string">'color'</span>, {<span class="hljs-keyword">async</span>: <span class="hljs-keyword">false</span>})
});</code></pre>

<blockquote>
  <p>Be sure to replace ‘YOUR NAME’ with… your actual full name or another unique alias.</p>

  <p>Notice that instead of adding an array for our colors, we’ve used a special relationship helper called <code>hasMany</code>. This is how we will associate our color models with our palette models. The inverse of this relationship is called <code>belongsTo</code>, which is what we will add to our color model.</p>

  <p>We’ll also take this opportunity to add a handy dandy computed property directly to our model to dynamically calculate the value of the styleString based on the r, g and b component values - just like we did in our controller for the focusColor. We’ll do the same for the labelString, since that is also constructed from the rgb values:</p>
</blockquote>

<pre class="prettyprint"><code class=" hljs actionscript"><span class="hljs-comment">// app/models/color.js</span>

<span class="hljs-preprocessor"><span class="hljs-keyword">import</span> Model from 'ember-data/model';</span>
<span class="hljs-preprocessor"><span class="hljs-keyword">import</span> attr from 'ember-data/attr';</span>
<span class="hljs-preprocessor"><span class="hljs-keyword">import</span> Ember from 'ember';</span>
<span class="hljs-preprocessor"><span class="hljs-keyword">import</span> { belongsTo } from 'ember-data/relationships';</span>

export <span class="hljs-keyword">default</span> Model.extend({
  palette: belongsTo(<span class="hljs-string">'palette'</span>, { async: <span class="hljs-literal">false</span> }),
  r: attr({ defaultValue: <span class="hljs-number">0</span> }),
  g: attr({ defaultValue: <span class="hljs-number">0</span> }),
  b: attr({ defaultValue: <span class="hljs-number">0</span> }),
  styleString: Ember.computed(<span class="hljs-string">'r'</span>, <span class="hljs-string">'g'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">var</span> r = <span class="hljs-keyword">this</span>.<span class="hljs-keyword">get</span>(<span class="hljs-string">'r'</span>);
    <span class="hljs-keyword">var</span> g = <span class="hljs-keyword">this</span>.<span class="hljs-keyword">get</span>(<span class="hljs-string">'g'</span>);
    <span class="hljs-keyword">var</span> b = <span class="hljs-keyword">this</span>.<span class="hljs-keyword">get</span>(<span class="hljs-string">'b'</span>);
    <span class="hljs-keyword">if</span> (r || g || b) {
      <span class="hljs-keyword">return</span> Ember.String.htmlSafe(`background-color:rgb(${r}, ${g}, ${b})`);
    } <span class="hljs-keyword">else</span> {
      <span class="hljs-keyword">return</span> Ember.String.htmlSafe(<span class="hljs-string">'background-color:transparent; border:1px solid #586073'</span>);
    }
  }),
  labelString: Ember.computed(<span class="hljs-string">'r'</span>, <span class="hljs-string">'g'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">var</span> r = <span class="hljs-keyword">this</span>.<span class="hljs-keyword">get</span>(<span class="hljs-string">'r'</span>);
    <span class="hljs-keyword">var</span> g = <span class="hljs-keyword">this</span>.<span class="hljs-keyword">get</span>(<span class="hljs-string">'g'</span>);
    <span class="hljs-keyword">var</span> b = <span class="hljs-keyword">this</span>.<span class="hljs-keyword">get</span>(<span class="hljs-string">'b'</span>);
    <span class="hljs-keyword">if</span> (r || g || b) {
      <span class="hljs-keyword">return</span> Ember.String.htmlSafe(`${<span class="hljs-keyword">this</span>.<span class="hljs-keyword">get</span>(<span class="hljs-string">'r'</span>)}, ${<span class="hljs-keyword">this</span>.<span class="hljs-keyword">get</span>(<span class="hljs-string">'g'</span>)}, ${<span class="hljs-keyword">this</span>.<span class="hljs-keyword">get</span>(<span class="hljs-string">'b'</span>)}`);
    } <span class="hljs-keyword">else</span> {
      <span class="hljs-keyword">return</span> <span class="hljs-string">''</span>;
    }
  }),
});</code></pre>

<hr>

<blockquote>
  <p>Take a break if you need one - This stuff is complex and may take a couple review passes before it sinks in. Don’t worry or feel discouraged if you feel like you do not 100% understand all of the details. This tutorial is your first exposure to these themes and topics and is meant as a starting guide for what to research and explore next.</p>
</blockquote>

<hr>

<h2 id="an-out-of-scope-addition">An out-of-scope addition</h2>

<p>Before we continue, Firebase has one additional configuration step we need to take to make sure that our models are returned from the database in the correct format for Ember Data to consume.</p>

<p>The full explanation here is outside of the scope of this tutorial, but serializers are awesome and something you should learn more about as you build even more complex applications with Ember. </p>

<p>Let’s add a serializer for our palette model:</p>

<p><code>ember g serializer palette</code></p>

<p>Once you’ve generated the serializer, open the file up and replace the contents with:</p>

<pre class="prettyprint"><code class=" hljs coffeescript"><span class="hljs-reserved">import</span> FirebaseSerializer from <span class="hljs-string">'emberfire/serializers/firebase'</span>;
<span class="hljs-reserved">export</span> <span class="hljs-reserved">default</span> FirebaseSerializer.extend({
  <span class="hljs-attribute">attrs</span>: {
    <span class="hljs-attribute">colors</span>: {<span class="hljs-attribute">embedded</span>: <span class="hljs-string">'always'</span>}
  }
});</code></pre>

<hr>

<h2 id="setting-the-routes-model">Setting the route’s model</h2>

<p>Now that we have REAL models and a REAL database, we can revisit our routes and update the model hooks to use our new palette models!</p>

<blockquote>
  <p>Note that the orderBy and equalTo syntax below is specific to Firebase and may not work with other backend solutions.</p>
</blockquote>

<p>Let’s replace our placeholder models with a function that fetches some palette records from Firebase.</p>

<pre class="prettyprint"><code class=" hljs javascript"><span class="hljs-comment">// app/routes/palettes.js</span>
model: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
   <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.store.query(<span class="hljs-string">'palette'</span>, {
     orderBy: <span class="hljs-string">'creator'</span>,
     equalTo: <span class="hljs-string">'Fixture'</span>
   });
 }</code></pre>

<p>Let’s make sure our server is running (<code>ember server</code>) and checkout what our palettes route is doing:</p>

<p><img src="https://github.com/lydiaguarino/emberitas-images/blob/master/fixture-endpoint.png?raw=true" alt="enter image description here" title=""></p>

<blockquote>
  <p>YAY! RECORDS FROM FIREBASE! </p>
</blockquote>

<p>Our equalTo filter was temporarily set to use ‘Fixture’ as the creator name. </p>

<p>Now that we’ve confirmed that everything is wired up correctly, we need to switch the filter back to our own name (or whatever alias you chose to use in your model for the default value of creator):</p>

<pre class="prettyprint"><code class=" hljs javascript">model: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
   <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.store.query(<span class="hljs-string">'palette'</span>, {
     orderBy: <span class="hljs-string">'creator'</span>,
     equalTo: <span class="hljs-string">'YOUR NAME'</span>
   });
 }</code></pre>

<hr>



<h2 id="adding-a-model-for-our-new-route">Adding a model for our New route</h2>

<p>Up to this point, we’ve been treating our New and Edit routes as though they were the same. </p>

<p>Although the form is the same, the data backing each of these routes is quite different. </p>

<p>For our new route, we want to create entirely new palette records and save them to the database once the user has filled out the form.</p>

<p>To achieve this, we’ll refactor the model hook in our route to return a brand new palette record with five brand new color records associated with it.</p>

<p>We’ll also go ahead and take this opportunity to set the focusColor on the controller to the first color in the palette, once the new model has been created:</p>

<pre class="prettyprint"><code class=" hljs cs">import Ember <span class="hljs-keyword">from</span> <span class="hljs-string">'ember'</span>;

export <span class="hljs-keyword">default</span> Ember.Route.extend({
  model() {
    <span class="hljs-comment">// add a new palette to our local store</span>
    <span class="hljs-keyword">var</span> newPalette = <span class="hljs-keyword">this</span>.store.createRecord(<span class="hljs-string">'palette'</span>, {});
    <span class="hljs-comment">// isolate the colors property of our new palette</span>
    <span class="hljs-keyword">var</span> colors = newPalette.<span class="hljs-keyword">get</span>(<span class="hljs-string">'colors'</span>);
    <span class="hljs-comment">// add five empty color records to the palette</span>
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">5</span>; i++) {
      colors.addObject(<span class="hljs-keyword">this</span>.store.createRecord(<span class="hljs-string">'color'</span>, {}));
    }
    <span class="hljs-keyword">return</span> newPalette;
  },
  afterModel(model) {
    <span class="hljs-comment">// select the first color and make that the active color for editing</span>
    <span class="hljs-keyword">this</span>.controllerFor(<span class="hljs-string">'palettes.new'</span>).<span class="hljs-keyword">set</span>(<span class="hljs-string">'focusColor'</span>, model.<span class="hljs-keyword">get</span>(<span class="hljs-string">'colors.firstObject'</span>));
  }
});</code></pre>

<hr>

<h2 id="adding-the-create-action-to-our-new-route">Adding the ‘create’ action to our New route</h2>

<p>Are you ready to FINALLY create and save your own palette record?! This is kind of a big deal. We’ve already added the R (Read) action to our CRUD application when we fetched the collection of palette records from Firebase. We’re about to slay another letter - C (Create).</p>

<p>Let’s start by adding an action to our form that we can wire up in our controller:</p>

<p>In the form template, add the following <code>\{{action}}</code> helper to the <code>&lt;form&gt;</code> element:</p>

<p><code>&lt;form \{{action 'savePalette' on='submit'}}&gt;</code></p>

<blockquote>
  <p>Since we have an input with type=’submit’ on our form, this action will automatically fire if the user clicks the Save button (our submit input) or if they press the <code>Return</code> key while the form is in focus.</p>
</blockquote>

<p>Next, we’ll add the new <code>savePalette</code> action to our controller actions hash:</p>

<pre class="prettyprint"><code class=" hljs coffeescript"><span class="hljs-attribute">actions</span>: {
    setFocusColor(color) {
      <span class="hljs-keyword">this</span>.set(<span class="hljs-string">'focusColor'</span>, color);
    },
    savePalette() {
      <span class="hljs-reserved">var</span> palette = <span class="hljs-keyword">this</span>.get(<span class="hljs-string">'model'</span>);
      palette.save<span class="hljs-function"><span class="hljs-params">()</span>.<span class="hljs-title">then</span><span class="hljs-params">(() =&gt; {<span class="hljs-keyword">this</span>.transitionToRoute(<span class="hljs-string">'palettes.index'</span>);}, (err) =&gt; {<span class="hljs-built_in">console</span>.log(err);})</span>;
    }
  }</span></code></pre>

<p>Our action does two things - it saves all of the adjustments the user made to the model - to Firebase and then transitions the user back to the palettes list.</p>

<p>Give it a try! You should be able to edit the empty form, press save, and see the new palette show up in the list view!</p>

<hr>



<h2 id="working-with-dynamic-routes">Working with dynamic routes</h2>

<p>For our Edit route, the Ember Router needs some help from us. How will it know <em>which</em> palette we want to edit?</p>

<p>The answer, as with most things Ember Router related, is the URL.</p>

<p>Each record we save automatically gets a special property called an <code>id</code>, which is simply a unique identifier JUST for that one record. </p>

<p>We can use this id to feed the Ember Router the detail it needs to get us to the right route with the right model.</p>

<p>To achieve this, we need to edit the Router directly, to include a special extension to our edit route to dynamically tack on the palette id. This is called a <code>dynamic segment</code>.</p>

<blockquote>
  <p>You may have noticed that simply visiting localhost:4200 doesn’t display anything in our application and that you have to navigate directly to localhost:4200/palettes to see anything meaningful. This is pretty cumbersome. It would be much better if our palettes showed up as soon as you load the application, right at localhost:4200.</p>

  <p>Let’s fix that behavior by over-riding the palettes route path to use the application root (or the ‘/’ path) instead:</p>
</blockquote>

<pre class="prettyprint"><code class=" hljs javascript"><span class="hljs-comment">// app/router.js</span>

Router.map(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
  <span class="hljs-keyword">this</span>.route(<span class="hljs-string">'palettes'</span>, { path: <span class="hljs-string">'/'</span>},  <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">this</span>.route(<span class="hljs-string">'new'</span>);
    <span class="hljs-keyword">this</span>.route(<span class="hljs-string">'edit'</span>, { path: <span class="hljs-string">'/palettes/:palette_id'</span> });
  });
});</code></pre>

<p>Restart your server!</p>

<p>swap out the model for something real:</p>



<h2 id="setting-the-edit-routes-model">Setting the Edit route’s model</h2>

<p>Now that we’ve updated our router to use a dynamic segment to determine <em>which</em> palette to edit, we can update the route’s model hook to use the dynamic segment (or palette_id) to look up and fetch a specific record from Firebase:</p>

<blockquote>
  <p>Just like with our New route, we can preemptively set the focusColor property on the controller to the first color in the palette. We’ll do this in the afterModel hook, just like in the New route. </p>
</blockquote>

<pre class="prettyprint"><code class=" hljs cs">export <span class="hljs-keyword">default</span> Ember.Route.extend({
    model(<span class="hljs-keyword">params</span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.<span class="hljs-keyword">get</span>(<span class="hljs-string">'store'</span>).findRecord(<span class="hljs-string">'palette'</span>, <span class="hljs-keyword">params</span>.palette_id);
  },
    afterModel(model) {  <span class="hljs-keyword">this</span>.controllerFor(<span class="hljs-string">'palettes.edit'</span>).<span class="hljs-keyword">set</span>(<span class="hljs-string">'focusColor'</span>, model.<span class="hljs-keyword">get</span>(<span class="hljs-string">'colors.firstObject'</span>));
  }
});</code></pre>

<p>Since we now have a dynamic segment in our route URL, we need to make an adjustment to our link-to helpers in our list view to pass the palette id along with our route name.</p>

<p>Similar to our setFocusColor action, the syntax looks like this: <br>
<code>\{{#link-to 'palettes.edit' palette.id class="btn-group color-palette"}}</code></p>

<blockquote>
  <p>Give it a try! Everything should now be wired up properly for you to click on individual palettes in the list view and have them correctly auto-populate the edit form with the expected palette.</p>
</blockquote>

<hr>



<h2 id="adding-the-u-and-d-to-crud">Adding the U and D to CRUD</h2>

<p>Knocking out the last two letters in our CRUD application is pretty straight forward. We need to wire up the savePalette action to our Edit controller (which will handle Update for us) and also wire up our Delete button.</p>

<p>As a best practice, we’ll also add an action to Cancel, which will throw away all of our Update changes instead of saving them.</p>

<p>In the actions hash of our edit controller, let’s add our three actions:</p>

<pre class="prettyprint"><code class=" hljs coffeescript">savePalette() {
      <span class="hljs-reserved">var</span> palette = <span class="hljs-keyword">this</span>.get(<span class="hljs-string">'model'</span>);
      palette.save<span class="hljs-function"><span class="hljs-params">()</span>.<span class="hljs-title">then</span><span class="hljs-params">(() =&gt; {<span class="hljs-keyword">this</span>.transitionToRoute(<span class="hljs-string">'palettes.index'</span>);}, (err) =&gt; {Ember.Logger.log(err);})</span>;
 },
 <span class="hljs-title">cancel</span><span class="hljs-params">()</span> {
   <span class="hljs-title">var</span> <span class="hljs-title">palette</span> = <span class="hljs-title">this</span>.<span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-string">'model'</span>)</span>;
   <span class="hljs-title">palette</span>.<span class="hljs-title">rollbackAttributes</span><span class="hljs-params">()</span>;
   <span class="hljs-title">var</span> <span class="hljs-title">colors</span> = <span class="hljs-title">palette</span>.<span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-string">'colors'</span>)</span>;
   <span class="hljs-title">colors</span>.<span class="hljs-title">forEach</span><span class="hljs-params">((color)=&gt;{
     color.rollbackAttributes();
   })</span>;
   <span class="hljs-title">this</span>.<span class="hljs-title">transitionToRoute</span><span class="hljs-params">(<span class="hljs-string">'palettes'</span>)</span>;
 },
 <span class="hljs-title">deletePalette</span><span class="hljs-params">()</span> {
   <span class="hljs-title">var</span> <span class="hljs-title">palette</span> = <span class="hljs-title">this</span>.<span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-string">'model'</span>)</span>;
   <span class="hljs-title">palette</span>.<span class="hljs-title">destroyRecord</span><span class="hljs-params">()</span>;
   <span class="hljs-title">this</span>.<span class="hljs-title">transitionToRoute</span><span class="hljs-params">(<span class="hljs-string">'palettes'</span>)</span>;
 }</span></code></pre>

<p>Since our New route uses the same form as our Edit route, we’ll want to add action handlers for cancel and deletePalette to our new controller, as well. Note that these can be much simpler because we haven’t saved the record to the database and therefore don’t need to roll back any changes or destroy any records. </p>

<p>Let’s add action handlers to our new controller for cancel and delete:</p>

<pre class="prettyprint"><code class=" hljs cs">cancel() {
   <span class="hljs-keyword">this</span>.transitionToRoute(<span class="hljs-string">'palettes'</span>);
 },
 deletePalette() {
   <span class="hljs-keyword">this</span>.transitionToRoute(<span class="hljs-string">'palettes'</span>);
 }</code></pre>

<p>The very last thing we need to do is wire up actions to our two remaining buttons - The Cancel and Delete buttons.</p>

<p>To do this, we’ll simply add some <code>\{{action}}</code> helpers to trigger the appropriate action when a user clicks the button:</p>

<pre class="prettyprint"><code class=" hljs r">&lt;!-- app/templates/-palette-form.hbs
<span class="hljs-keyword">...</span>
&lt;button class=<span class="hljs-string">"btn"</span> \{{action <span class="hljs-string">'cancel'</span>}}&gt;Cancel&lt;/button&gt;
&lt;button class=<span class="hljs-string">"btn"</span> \{{action <span class="hljs-string">'deletePalette'</span>}}&gt;Delete&lt;/button&gt;
&lt;input class=<span class="hljs-string">"btn"</span> type=<span class="hljs-string">"submit"</span> value=<span class="hljs-string">"Save"</span>&gt;</code></pre>

<p><img src="https://github.com/lydiaguarino/emberitas-images/blob/master/delete-palette.gif?raw=true" alt="enter image description here" title=""></p>



<h1 id="you-are-a-freaking-front-end-developer">You are a freaking front-end developer!</h1>



<h1 id="you-built-an-entire-application-go-have-a-sundae-or-a-mani-pedi-or-something">You built AN ENTIRE APPLICATION! Go have a sundae or a mani-pedi or something.</h1>



<h1 id="you-deserve-it">You deserve it.</h1>

<hr>

<h2 id="a-quick-extension-if-you-want-to-share-your-project-with-the-world">A quick extension if you want to share your project with the world:</h2>

<p>Your application is very real. Unfortunately, it is currently running only on your own machine. </p>

<p>App <em>deployment</em> used to be a complex, arduous task. Thankfully, this is the future. </p>

<p>Our good friends at Pagefront have built a platform to quickly and painlessly deploy your Ember App with two terminal commands:</p>

<p><code>ember install ember-pagefront --app=YOUR_APP_NAME</code> <br>
<code>ember deploy production</code></p>

<p>And Voila! Your application is ALIVE. ON THE INTERNET.</p>
